<?php
namespace Docx{use Docx\Common;use Docx\Web\Router;class Application{use\Docx\Base\Behavior;protected static$properties=['request'=>'\\Docx\\Web\\Request','response'=>'\\Docx\\Web\\Response','session'=>'\\Docx\\Web\\SessionHandler',];protected$shortcuts=[];var$settings=[];function __construct(array$XB=[]){if(version_compare(PHP_VERSION,'7.0.0')<0){Common::throwWarnings();}if(isset($XB['timezone'])){date_default_timezone_set($XB['timezone']);}if(Common::isCLI()){set_time_limit(0);ini_set('display_errors',1);if(isset($XB['memory_limit'])){ini_set('memory_limit',$XB['memory_limit']);}}$TB=\Docx\Importer::getInstance();$this->installRef($TB,['import','introduce','addClass']);$pD=Router::getCurrent();$this->installRef($pD,['dispatch','expose']);$this->settings=$XB;}function __get($A){$A=strtolower($A);$jB=$this->prop($A);if(!$jB&&array_key_exists($A,self::$properties)){$G=self::$properties[$A];$jB=Common::execConstructArray($G);$this->setProp($A,$jB);}return$jB;}function __call($A,$C){$A=strtolower($A);if(isset($this->shortcuts[$A])){$hC=$this->shortcuts[$A];if(is_array($hC)){@list($DB,$A)=$hC;}else{$DB=&$this->shortcuts[$A];}return Common::execMethodArray($DB,$A,$C);}}static function setLanguage($oD,$gC='zh_CN',$bC='messages'){putenv('LANG='.$gC);setlocale(LC_ALL,$gC);if(function_exists('bindtextdomain')){bindtextdomain($bC,$oD);textdomain($bC);}}function install($DB,array$yB){foreach($yB as$lB=>$P){$lB=strtolower(is_numeric($lB)?$P:$lB);$this->shortcuts[$lB]=[$DB,$P];}return$this;}function installRef(&$DB,array$yB){foreach($yB as$P){$this->shortcuts[strtolower($P)]=&$DB;}return$this;}function route($L,$Q){$xB=Router::getCurrent();$C=func_get_args();return Common::execMethodArray($xB,'route',$C);}function run($L=false){if($L===false){if(Common::isCLI()){$nD=$this->request->getArgv();$L='/'.implode('/',array_slice($nD,1));}else{$L=$this->request->getPath();}}$JB=$this->dispatch($L);if(!$JB){return die();}$hB=null;foreach($JB['handlers']as$Q){if(empty($Q)){continue;}if(is_string($Q)&&class_exists($Q,true)){$Q=new$Q($this,$hB);}$hB=$Q;}$P=$this->request->getMethod();if($P==='post'){$P=$this->request->getString('_method','post');}if(!($Q instanceof\Closure)){$Q->globals['method']=$P;$Q->globals['path']=$L;$Q->globals['url']=$JB['url'];$Q->globals['rule']=$JB['rule'];$Q->globals['args']=$JB['args'];}$vB='';if(is_callable($Q)){try{$vB=Common::execFunctionArray($Q,$JB['args']);}catch(\Exception$dC){if(method_exists($Q,'except')){$vB=$Q->except($dC);}}}return die(strval($vB));}}final class Common{static function isCLI(){return strtolower(php_sapi_name())==='cli';}static function isWinNT(){return strtolower(substr(PHP_OS,0,3))==='win';}static function throwWarnings(){set_error_handler(function($mD,$lD,$kD,$jD,array$OE=[]){if(0===error_reporting()){return false;}throw new\ErrorException($lD,0,$mD,$kD,$jD);},E_WARNING|E_CORE_WARNING|E_COMPILE_WARNING);}static function startsWith($kB,$VB){return strncmp($kB,$VB,strlen($VB))===0;}static function endsWith($kB,$VB){$rB=strlen($VB);return$rB===0||(strlen($kB)>=$rB&&substr_compare($kB,$VB,-$rB)===0);}static function replaceWith($U,array$N=[],$V='',$pC=''){if(empty($N)){return$U;}if(empty($V)&&empty($pC)){$FC=&$N;}else{$FC=[];foreach($N as$D=>&$F){$FC[$V.$D.$pC]=$F;}}$U=strtr($U,$FC);return$U;}static function convertString($a,$KB='UTF-8'){$KB=strtoupper($KB);if(function_exists('mb_detect_encoding')){return mb_detect_encoding($a,$KB,true)?$a:mb_convert_encoding($a,$KB,'UTF-8, GBK');}elseif(function_exists('iconv')){$iD=$KB==='UTF-8'?'GBK':'UTF-8';return iconv($iD,$KB.'//IGNORE',$a);}}static function execFunctionArray($d,array$C=[]){switch(count($C)){case 0:return$d();case 1:return$d($C[0]);case 2:return$d($C[0],$C[1]);case 3:return$d($C[0],$C[1],$C[2]);case 4:return$d($C[0],$C[1],$C[2],$C[3]);case 5:return$d($C[0],$C[1],$C[2],$C[3],$C[4]);default:if(is_object($d)){$f=new\ReflectionMethod($d,'__invoke');return$f->invokeArgs($d,$C);}elseif(is_callable($d)){$f=new\ReflectionFunction($d);return$f->invokeArgs($C);}}}static function execMethodArray($l,$P,array$C=[]){if(is_object($l)){switch(count($C)){case 0:return$l->{$P}();case 1:return$l->{$P}($C[0]);case 2:return$l->{$P}($C[0],$C[1]);case 3:return$l->{$P}($C[0],$C[1],$C[2]);case 4:return$l->{$P}($C[0],$C[1],$C[2],$C[3]);case 5:return$l->{$P}($C[0],$C[1],$C[2],$C[3],$C[4]);}}if(method_exists($l,$P)){$f=new\ReflectionMethod($l,$P);if($f->isPublic()&&!$f->isAbstract()){if($f->isStatic()){return$f->invokeArgs(null,$C);}else{return$f->invokeArgs($l,$C);}}}}static function execConstructArray($G,array$C=[]){if(method_exists($G,'getInstance')){$f=new\ReflectionMethod($G,'getInstance');return$f->invokeArgs(null,$C);}switch(count($C)){case 0:return new$G();case 1:return new$G($C[0]);case 2:return new$G($C[0],$C[1]);case 3:return new$G($C[0],$C[1],$C[2]);case 4:return new$G($C[0],$C[1],$C[2],$C[3]);case 5:return new$G($C[0],$C[1],$C[2],$C[3],$C[4]);default:if(class_exists($G)){$f=new\ReflectionClass($G);return$f->newInstanceArgs($C);}}}}final class Importer{private static$instance=null;private$classes=[];private$prefixes=[];private$sepeators='';private$sepeator_array=[];private function __construct($vC='\\'){$this->sepeators=$vC;$this->sepeator_array=str_split($vC);$this->prefixes[__NAMESPACE__]=__DIR__;}static function getInstance(){if(is_null(self::$instance)){self::$instance=new self();self::$instance->register();}return self::$instance;}static function exists($G,$pB=true){return class_exists($G,$pB)||interface_exists($G,$pB)||trait_exists($G,$pB);}static function requireFile($v,$hD=false){if(empty($v)||!file_exists($v)){return false;}if($hD){require_once$v;}else{require$v;}return true;}function register(){return spl_autoload_register(array($this,'autoload'));}function autoload($G){$G=trim($G,$this->sepeators);if(isset($this->classes[$G])){if(self::requireFile($this->classes[$G])){return self::exists($G,false);}}$gD=$this->matchPrefix($G);return$gD===true;}function matchPrefix($G){$RB='';foreach($this->prefixes as$i=>$L){if(substr($G,0,strlen($i))===$i){if(empty($i)){$RB=$G;}else{$RB=substr($G,strlen($i)+1);}$nB=strtok($RB,$this->sepeators);break;}}if(empty($RB)){return false;}$aC=$L.DIRECTORY_SEPARATOR;$aC.=str_replace($this->sepeator_array,DIRECTORY_SEPARATOR,$RB);if(self::requireFile($aC.'.php')){if(self::exists($G,false)){return true;}}while($nB){$L.=DIRECTORY_SEPARATOR.$nB;if(self::requireFile($L.'.php')){if(self::exists($G,false)){return true;}}if(!file_exists($L)){return false;}$nB=strtok($this->sepeators);}}function addClass($K,$G){$iC=func_get_args();$K=array_shift($iC);if(is_readable($K)){foreach($iC as$G){$this->classes[trim($G,'\\')]=$K;}}krsort($this->classes);return$this;}function introduce($i,$R){$i=trim($i,'\\');$R=rtrim($R,'\\/');$this->prefixes[$i]=$R;krsort($this->prefixes);return$this;}function import($i,$R){$eD=str_replace($this->sepeator_array,DIRECTORY_SEPARATOR,$i);$R.=DIRECTORY_SEPARATOR.$eD;return$this->introduce($i,$R);}}\Docx\Importer::getInstance();}
namespace Docx\Base{use Docx\Event\Sender;use Docx\Event\Listener;trait Behavior{protected$event_sender=[];function prop($A){if(property_exists($this,$A)){return$this->$A;}}function setProp($A,$F){$this->$A=$F;return$this;}function event($A){if(isset($this->event_sender[$A])){return$this->event_sender[$A];}}function addEvent($A,$wB){if(!$this->event($A)){$this->event_sender[$A]=new Sender();}$h=new Listener($wB);$this->event_sender[$A]->attach($h);return$this;}}use Docx\Common;abstract class EnumType{const __prefix='';const __default=null;protected$name='__default';protected$value=null;function __construct($QB='__default',$IB=false){$this->value=self::getDefault();if(is_int($QB)&&is_numeric($QB)){$this->initByValue($QB,$IB);}elseif(is_string($QB)){$this->initByName($QB,$IB);}}static function getPrefix(){return static::__prefix;}static function getDefault(){return static::__default;}function initByValue($F,$IB=false){$UD=$this->getConstList(true);$D=array_search($F,$UD,$IB);if($D!==false){$this->name=$D;$this->value=$F;}}function initByName($A='__default',$IB=false){if($IB===false){$A=strtoupper($A);$V=self::getPrefix();if($V&&$A!=='__default'){if(!Common::startsWith($A,$V)){$A=$V.$A;}}}$G=get_class($this);$F=constant($G.'::'.$A);if(!is_null($F)){$this->name=$A;$this->value=$F;}}function __toString(){return strval($this->getValue());}function getName(){return$this->name;}function getValue(){return$this->value;}function getConstList($dD=false){$B=[];if($dD){$B['__default']=self::getDefault();}$PC=$this->getConstants();if($PC&&is_array($PC)){$G=get_class($this);foreach($PC as$A){$B[$A]=constant($G.'::'.$A);}}return$B;}abstract function getConstants();}use Docx\Base\Storage;class Factory{protected$storage=null;protected$objects=[];function __construct(Storage&$cD){$this->storage=$cD;}function normalize($G){return rtrim($G,'\\');}function create($A,$D='default'){$HC=$this->storage->getSectionOnce($A);$G=$this->normalize($HC->getItem('class'));$E=$HC->getArray($D);if($D!=='default'){$E=array_merge($HC->getArray('default'),$E);}if(class_exists($G)){foreach($E as$tC=>&$F){if(starts_with($tC,'@')){$F=$this->load(trim($tC,'@'),$F);}}return exec_construct_array($G,array_values($E));}}function load($A,$D='default'){if(!isset($this->objects[$A])){$this->objects[$A]=[];if(!isset($this->objects[$A][$D])){$this->objects[$A][$D]=$this->create($A,$D);}}return$this->objects[$A][$D];}}use ArrayAccess;use Countable;class Storage implements Countable,ArrayAccess{protected$data=[];protected$insensitive=false;function __construct($E=null,$bD=false){$this->insensitive=$bD;$this->update($E);}function update($E){if($E instanceof self){$E=$E->data;}else{$E=empty($E)?[]:(array)$E;}if($this->insensitive){$E=array_change_key_case($E);}$this->data=array_merge($this->data,$E);}function count(){return count($this->data);}function offsetExists($Z){if($this->insensitive){$Z=strtolower($Z);}return array_key_exists($Z,$this->data);}function offsetGet($Z){if($this->insensitive){$Z=strtolower($Z);}return$this->data[$Z];}function offsetSet($Z,$F){if($this->insensitive){$Z=strtolower($Z);}$this->data[$Z]=$F;}function offsetUnset($Z){if($this->insensitive){$Z=strtolower($Z);}unset($this->data[$Z]);}function getItem($A,$S=null){$rC=@$this->offsetGet($A);return is_null($rC)?$S:$rC;}function getArray($A,array$S=[]){$E=$this->getItem($A);return is_array($E)?$E:$S;}function getSection($A){$E=$this->getArray($A,[]);return new self($E);}function getSectionOnce($A){$E=$this->getItem($A);if(!($E instanceof self)){$E=new self($E);$this->offsetSet($A,$E);}return$E;}}}
namespace Docx\Event{use Exception;class EventFailed extends Exception{}use SplSubject;use SplObserver;use Docx\Common;class Listener implements SplObserver{var$callback=null;function __construct($wB=null){$this->callback=$wB;}function update(SplSubject$x){$this->reply($x->message,$x);}function reply(array&$I,$x=null){if($this->callback){return Common::execFunctionArray($this->callback,$I);}}}class Sender implements SplSubject{protected$listeners=[];var$message=[];function attach(SplObserver$h){$this->listeners[]=$h;}function detach(SplObserver$h){$D=array_search($h,$this->listeners,true);if($D!==false){$this->detachKey($D);}}function detachKey($D){unset($this->listeners[$D]);}function notify(){foreach($this->listeners as&$h){try{$h->update($this);}catch(EventFailed$PB){continue;}}}function emit(){$this->message=func_get_args();$oC=[];foreach($this->listeners as$aD=>&$h){try{$oC[$aD]=$h->reply($this->message,$this);}catch(EventFailed$PB){continue;}}return$oC;}function emitOnce(){$this->message=func_get_args();$ZC=null;foreach($this->listeners as&$h){try{$ZC=$h->reply($this->message,$this);}catch(EventFailed$PB){continue;}break;}return$ZC;}}}
namespace Docx\Cache{use Docx\Event\EventFailed;use Docx\Event\Listener;abstract class BaseCache extends Listener{const OP_READ=0;const OP_WRITE=1;const OP_REMOVE=2;const OP_CUSTOM=3;function reply(array&$I,$x=null){$B=null;list($NB,$A)=$I;switch($NB){case self::OP_READ:$B=$this->read($A);break;case self::OP_WRITE:$F=$I[2];$T=$I[3];$B=$this->write($A,$F,$T);break;case self::OP_REMOVE:$B=$this->remove($A);break;default:throw new EventFailed('Operation not supported!');}return$B;}abstract function prepare($A);abstract function read($A);abstract function write($A,$F,$T=0);abstract function remove($A);}use Docx\Event\Sender;class CacheBox extends Sender{use\Docx\Base\Behavior;protected$timeout=-1;function __construct(array$E=[],$T=0){foreach($E as$D=>$F){$this->$D=$F;}$this->setTimeout($T);}function setTimeout($T){$T=intval($T);if($T>0){$this->timeout=$T;}else{$this->timeout=-1;}return$this;}function get($A,$S=null){$B=$this->emitOnce(BaseCache::OP_READ,$A);if(is_null($B)){$B=$S;}$this->setProp($A,$B);return$B;}function put($A,$F){if(is_null($F)){$this->emit(BaseCache::OP_REMOVE,$A);}else{$this->emit(BaseCache::OP_WRITE,$A,$F,$this->timeout);}return$this->setProp($A,$F);}}class FileCache extends BaseCache{protected$filename='';protected$dir='';protected$ext='';function __construct($R=false,$eC='.php'){if(empty($R)){$this->dir=sys_get_temp_dir();}else{$this->dir=rtrim($R,DIRECTORY_SEPARATOR);@mkdir($this->dir,0755,true);}$this->ext='.'.ltrim(strtolower($eC),'.');}static function dumpYaml($E){if(extension_loaded('yaml')){return yaml_emit($E,YAML_UTF8_ENCODING,YAML_LN_BREAK);}else if(class_exists('\\Symfony\\Component\\Yaml\\Yaml')){return\Symfony\Component\Yaml\Yaml::dump($E);}}static function parseYaml($E){if(extension_loaded('yaml')){return yaml_parse($E);}else if(class_exists('\\Symfony\\Component\\Yaml\\Yaml')){return\Symfony\Component\Yaml\Yaml::parse($E);}}function prepare($A){$this->filename=$this->dir.DIRECTORY_SEPARATOR.$A.$this->ext;if(!is_readable($this->filename)){touch($this->filename);}if($this->ext==='.yml'||$this->ext==='.yaml'){}return true;}function read($A){$this->prepare($A);$n=filesize($this->filename);if($n===false||$n===0){return;}if($this->ext==='.php'){return include$this->filename;}else{$CB=file_get_contents($this->filename);return$this->decode($CB);}}function write($A,$F,$T=0){$this->prepare($A);$E=$this->encode($F,$A);$n=file_put_contents($this->filename,$E,LOCK_EX);return$n&&$n>0;}function remove($A){$this->prepare($A);if(file_exists($this->filename)){return unlink($this->filename);}}protected function decode($CB){switch($this->ext){case'.txt':case'.htm':case'.html':$B=$CB;break;case'.json':$B=json_decode($CB,true);break;case'.yml':case'.yaml':$B=self::parseYaml($CB);break;}return$B;}protected function encode($E){switch($this->ext){case'.txt':case'.htm':case'.html':$B=$E;break;case'.php':$CB=var_export($E,true);$B="<?php \nreturn ".$CB.";\n";break;case'.json':$B=json_encode($E);break;case'.yml':case'.yaml':$B=self::dumpYaml($E);break;}return$B;}}class MatrixCache extends BaseCache{protected$filename='';protected$dir='';protected$ext='';protected$delimiter='';protected$at_least=0;function __construct($R=false,$eC='.csv',$ZD="\t",$YD=0){if(empty($R)){$this->dir=sys_get_temp_dir();}else{$this->dir=rtrim($R,DIRECTORY_SEPARATOR);@mkdir($this->dir,0755,true);}$this->ext='.'.ltrim(strtolower($this->ext),'.');$this->delimiter=$ZD?:"\t";$this->at_least=intval($YD);}function prepare($A){$this->filename=$this->dir.DIRECTORY_SEPARATOR.$A.$this->ext;if(!is_readable($this->filename)){touch($this->filename);}return true;}function read($A){$this->prepare($A);$n=filesize($this->filename);if($n===false||$n===0){return;}$E=[];$c=fopen($this->filename,'rb');if($c!==false){do{$J=fgetcsv($c,0,$this->delimiter);if(is_null($J)||$J===false){break;}if(is_null($J[0])){$J=[];}elseif($this->at_least>0){if(count($J)<$this->at_least){continue;}}$E[]=$J;}while(1);fclose($c);}return$E;}function write($A,$F,$T=0){$this->prepare($A);$c=fopen($this->filename,'wb');if($c===false||!is_array($F)){return false;}foreach($F as$gB){fputcsv($c,$gB,$this->delimiter);}fclose($c);return true;}function remove($A){$this->prepare($A);if(file_exists($this->filename)){return unlink($this->filename);}}}use Docx\Common;class RedisCache extends BaseCache{const SHAPE_INT='int';const SHAPE_FLOAT='float';const SHAPE_STRING='string';const SHAPE_ARRAY='array';const SHAPE_OBJECT='object';const SHAPE_DATETIME='datetime';protected$redis=null;protected$shape='';function __construct($XD,$WD='string'){$this->redis=$XD;$this->shape=$WD;}function prepare($A){try{$this->redis->ping();return true;}catch(\Exception$PB){return false;}}function reply(array&$I,$x=null){$B=null;list($NB,$P)=$I;if($NB===self::OP_CUSTOM){$C=array_slice($I,2);$B=Common::execMethodArray($this,$P,$C);}else{$B=parent::reply($I,$x);}return$B;}function read($A){$this->prepare($A);if($this->shape===self::SHAPE_OBJECT){$E=$this->redis->hGetAll($A);}elseif($this->shape===self::SHAPE_ARRAY){$E=$this->redis->lRange($A,0,-1);}else{$E=$this->redis->get($A);}return$E;}function write($A,$F,$T=0){$this->prepare($A);if($this->shape===self::SHAPE_OBJECT){foreach($F as$D=>$KC){$this->redis->hSet($A,$D,$KC);}}elseif($this->shape===self::SHAPE_ARRAY){foreach($F as$KC){$this->redis->lPush($A,$KC);}}else{$this->redis->set($A,$F);}if($T>0){$this->redis->expire($A,$T);}return true;}function remove($A){$this->prepare($A);$VD=$this->redis->del($A);return$VD>0;}function incre($A,$r=1){$this->prepare($A);$r=abs($r);if($r===1){return$this->redis->incre($D);}else{return$this->redis->increBy($D,$r);}}function decre($A,$r=1){$this->prepare($A);$r=abs($r);if($r===1){return$this->redis->decre($D);}else{return$this->redis->decreBy($D,$r);}}}}
namespace Docx\Log{use PDO;use Docx\Event\Listener;class DBLogger extends Listener{const ZONE_INTERVAL=28800;protected$pdo=null;protected$last_hour=0;function __construct(PDO$qD){$this->pdo=$qD;}function __destruct(){unset($this->pdo);}function getTable($dB){$GB='t_log_'.date('Ymd',$dB);if($dB-$this->last_hour>=self::ZONE_INTERVAL){$this->last_hour=$dB-$dB%self::ZONE_INTERVAL;$NC='CREATE TABLE IF NOT EXISTS %s LIKE %s';$OC=sprintf($NC,$GB,'t_log');$this->pdo->exec($OC);}return$GB;}function insertRow($GB,array&$gB){$rD=implode(',',array_keys($gB));$EB=implode("','",array_values($gB));$NC="INSERT INTO %s(%s) VALUES('%s')";$OC=sprintf($NC,$GB,$rD,$EB);$this->pdo->exec($OC);}function reply(array&$I,$x=null){@list($U,$e)=$I;$GB=$this->getTable($e['moment']);$e['moment']=date('Y-m-d H:i:s',$e['moment']);$e['content']=$U;$this->insertRow($GB,$e);}}defined('LOG_WRITE_FILE_FREQ')or define('LOG_WRITE_FILE_FREQ',1);class FileLogger extends Listener{protected$filepath='';protected$records=[];function __construct($o=false){if($o===false){$o=realpath('./logs');}@mkdir($o,0777,true);$this->filepath=$o.DIRECTORY_SEPARATOR.'%s.log';}function __destruct(){$this->writeFiles();unset($this->records);}function writeFiles(){foreach($this->records as$K=>&$wC){$v=sprintf($this->filepath,$K);$sD=implode('',$wC);$n=file_put_contents($v,$sD,FILE_APPEND|LOCK_EX);if($n!==false){$wC=[];}}}function reply(array&$I,$x=null){@list($U,$e)=$I;$K=$e['name'].'_'.date('Ymd',$e['moment']);$e['moment']=date('Y-m-d H:i:s',$e['moment']);$tD=implode("\t",$e)."\t".$U;if(!isset($this->records[$K])){$this->records[$K]=[];}array_push($this->records[$K],$tD.PHP_EOL);if(LOG_WRITE_FILE_FREQ>=1||LOG_WRITE_FILE_FREQ>=mt_rand(1,10000)/10000){$this->writeFiles();}}}use Docx\Base\EnumType;class LogLevel extends EnumType{const __default=self::DEBUG;const EMERGENCY=1;const ALERT=2;const CRITICAL=3;const ERROR=4;const WARNING=5;const NOTICE=6;const INFO=7;const DEBUG=8;function getConstants(){return['EMERGENCY','ALERT','CRITICAL','ERROR','WARNING','NOTICE','INFO','DEBUG',];}}use Docx\Common;use Docx\Event\Sender;use Docx\Web\Request;class Logging extends Sender{protected$name='';protected$threshold=0;function __construct($A='default',$y='DEBUG'){$this->name=$A;$SC=new LogLevel($y);$this->threshold=$SC->getValue();}function allowLevel($y){$SC=new LogLevel($y);return$SC->getValue()<=$this->threshold;}static function getClientIP(){return Request::getClientIP();}static function format($I,array$N=[]){$U=is_null($I)?'':(string)$I;return Common::replaceWith($U,$N,'{','}');}function log($y,$I,array$N=[]){$y=strtoupper($y);if($this->allowLevel($y)){$U=self::format($I,$N);$e=['moment'=>time(),'ipaddr'=>self::getClientIP(),'level'=>$y,'name'=>$this->name,];$this->emit($U,$e);}}function emergency($I,array$N=[]){$this->log(__FUNCTION__,$I,$N);}function alert($I,array$N=[]){$this->log(__FUNCTION__,$I,$N);}function critical($I,array$N=[]){$this->log(__FUNCTION__,$I,$N);}function error($I,array$N=[]){$this->log(__FUNCTION__,$I,$N);}function warning($I,array$N=[]){$this->log(__FUNCTION__,$I,$N);}function notice($I,array$N=[]){$this->log(__FUNCTION__,$I,$N);}function info($I,array$N=[]){$this->log(__FUNCTION__,$I,$N);}function debug($I,array$N=[]){$this->log(__FUNCTION__,$I,$N);}}}
namespace Docx\Utility{use Docx\Common;use Docx\Utility\Word;use Docx\Utility\Markdoc;defined('DS')or define('DS',DIRECTORY_SEPARATOR);defined('CACHE_UNLINK_EMPTY_FREQ')or define('CACHE_UNLINK_EMPTY_FREQ',0.2);class FileSystem{protected$extname='';function __construct($TC=''){$this->extname=$TC;}static function removeEmptyDirs($R,$fC=CACHE_UNLINK_EMPTY_FREQ){if(!file_exists($R)||!is_dir($R)){return;}if($fC<1&&$fC<mt_rand(1,10000)/10000){return;}$UB=true;$m=glob($R.DS.'*');foreach($m as$k){if(is_dir($k)){$NE=self::removeEmptyDirs($k,1);$UB=$UB&&$NE;}else{$UB=false;}}if($UB){@rmdir($R);}return$UB;}static function removeAllFiles($L,array$SD=[]){if(!file_exists($L)){return;}if(is_file($L)){return@unlink($L);}$ZB=true;$m=glob($L.DS.'*');foreach($m as$k){if(in_array($k,$SD,true)){$EC=false;}else if(is_dir($k)){$EC=self::removeAllFiles($k);}else{$EC=@unlink($k);}$ZB=$ZB&&$EC;}if($ZB){@rmdir($L);}return$ZB;}static function traverse(array&$m,$d,$V=''){$B=[];foreach($m as$ME=>$k){$W=$V.'/'.$ME;if(isset($k['nodes'])){$LE=self::traverse($k['nodes'],$d,$W);}$B[]=Common::execFunctionArray($d,[$k,$W,$LE]);}return$B;}static function sortNames(array&$YB,$aB,$KE=false,$JE=false){if($JE){$UC='return $a["'.$aB.'"] - $b["'.$aB.'"];';}else{$UC='return strcasecmp($a["'.$aB.'"], $b["'.$aB.'"]);';}$IE=$KE?'$b, $a':'$a, $b';uasort($YB,create_function($IE,$UC));}static function slugifyName($K,$HE='_'){$j=explode($HE,$K,2);if(count($j)===2&&is_numeric($j[0])){$K=$j[1];}$g=Word::slugify($K);return array($g,$K);}static function adjustFile(array&$B,$OB){$s=false;$w=filemtime($OB);if(!isset($B['mtime'])||$B['mtime']!==$w){$s=true;$B['mtime']=$w;$B['sha1']=sha1_file($OB);$GE=new Markdoc($OB);if($FE=$GE->getMetaData('title')){$B['title']=$FE;}}return$s;}static function adjustDir(array&$B,$w){$s=false;if(!isset($B['mtime'])||$B['mtime']!==$w){$s=true;$B['mtime']=$w;$B['sha1']=sha1(json_encode($B['nodes']));}return$s;}function initNode(array&$m,$u,$HB,$xC=false){if($xC&&$this->extname){$K=basename($u,$this->extname);assert($K!==$u);}else{$K=$u;}list($g,$K)=self::slugifyName($K);$g=strtolower($g);if(!isset($m[$g])){$m[$g]=['path'=>$HB,'title'=>$K,'is_file'=>$xC?1:0,];}return$g;}function discover(array&$B,$AB,$fB=''){if(!isset($B['nodes'])){$B['nodes']=[];}$uC=$fB?$AB.DS.$fB:$AB;$sB=filemtime($uC.DS.'.');$m=scandir($uC);foreach($m as$u){if(substr($u,0,1)==='.'){continue;}$HB=$fB?$fB.DS.$u:$u;$sC=$AB.DS.$HB;if(is_file($sC)){$g=$this->initNode($B['nodes'],$u,$HB,true);self::adjustFile($B['nodes'][$g],$sC);$w=$B['nodes'][$g]['mtime'];if($w>$sB){$sB=$w;}}else{$g=$this->initNode($B['nodes'],$u,$HB,false);$this->discover($B['nodes'][$g],$AB,$HB);}}$s=self::adjustDir($B,$sB);return$s;}function getOrganiz($R,$t=null){$AB=realpath($R);if(!is_dir($AB)){return;}$B=$t?$t->get('docs',[]):[];$s=$this->discover($B,$AB);if($s){if(isset($B['nodes']['index'])){$B['nodes']['index']['is_file']=-1;}self::sortNames($B['nodes'],'is_file',false,true);if($t){$t->put('docs',$B);}}return$B;}}use Docx\Base\EnumType;class FileType extends EnumType{const __prefix='TYPE_';const __default=self::UNKNOWN;const TYPE_FIFO=1;const TYPE_CHAR=2;const TYPE_DIR=3;const TYPE_BLOCK=4;const TYPE_LINK=5;const TYPE_FILE=6;const TYPE_UNKNOWN=7;function getConstants(){return['TYPE_FIFO','TYPE_CHAR','TYPE_DIR','TYPE_BLOCK','TYPE_LINK','TYPE_FILE','TYPE_UNKNOWN',];}static function getFileType($K){$qC=new self();try{$O=filetype($K);if($O!==false){$qC->initByName(strtoupper($O));}}catch(\Exception$PB){}return$qC;}}class Inflect{protected static$plural=['/(quiz)$/i'=>'$1zes','/^(ox)$/i'=>'$1en','/([m|l])ouse$/i'=>'$1ice','/(matr|vert|ind)ix|ex$/i'=>'$1ices','/(x|ch|ss|sh)$/i'=>'$1es','/([^aeiouy]|qu)y$/i'=>'$1ies','/(hive)$/i'=>'$1s','/(?:([^f])fe|([lr])f)$/i'=>'$1$2ves','/(shea|lea|loa|thie)f$/i'=>'$1ves','/sis$/i'=>'ses','/([ti])um$/i'=>'$1a','/(tomat|potat|ech|her|vet)o$/i'=>'$1oes','/(bu)s$/i'=>'$1ses','/(alias)$/i'=>'$1es','/(octop)us$/i'=>'$1i','/(ax|test)is$/i'=>'$1es','/(us)$/i'=>'$1es','/s$/i'=>'s','/$/'=>'s',];protected static$singular=['/(quiz)zes$/i'=>'$1','/(matr)ices$/i'=>'$1ix','/(vert|ind)ices$/i'=>'$1ex','/^(ox)en$/i'=>'$1','/(alias)es$/i'=>'$1','/(octop|vir)i$/i'=>'$1us','/(cris|ax|test)es$/i'=>'$1is','/(shoe)s$/i'=>'$1','/(o)es$/i'=>'$1','/(bus)es$/i'=>'$1','/([m|l])ice$/i'=>'$1ouse','/(x|ch|ss|sh)es$/i'=>'$1','/(m)ovies$/i'=>'$1ovie','/(s)eries$/i'=>'$1eries','/([^aeiouy]|qu)ies$/i'=>'$1y','/([lr])ves$/i'=>'$1f','/(tive)s$/i'=>'$1','/(hive)s$/i'=>'$1','/(li|wi|kni)ves$/i'=>'$1fe','/(shea|loa|lea|thie)ves$/i'=>'$1f','/(^analy)ses$/i'=>'$1sis','/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/i'=>'$1$2sis','/([ti])a$/i'=>'$1um','/(n)ews$/i'=>'$1ews','/(h|bl)ouses$/i'=>'$1ouse','/(corpse)s$/i'=>'$1','/(us)es$/i'=>'$1','/s$/i'=>'',];protected static$irregular=['move'=>'moves','foot'=>'feet','goose'=>'geese','sex'=>'sexes','child'=>'children','man'=>'men','tooth'=>'teeth','person'=>'people',];protected static$uncountable=['sheep','fish','deer','series','species','money','rice','information','equipment',];protected static$abbreviations=['AD','API','B2B','B2C','C2C','CEO','CFO','COO','CTO','ORM','DSA','GEO','GPS','HTML','HTTP','ID','IO','IP','IQ','MD5','MTV','MV','MVC','NBA','OK','P2P','PC','PV','PDF','PHP','QQ','RMB','RSA','SOHO','SHA','SQL','TV','UI','URI','URL','USA','VIP','WC','WEB','WAP','WIFI','XML',];static function singularize($M){if(in_array(strtolower($M),self::$uncountable,true)){return$M;}foreach(self::$irregular as$B=>$Y){$Y='/'.$Y.'$/i';if(preg_match($Y,$M)){return preg_replace($Y,$B,$M);}}foreach(self::$singular as$Y=>$B){if(preg_match($Y,$M)){return preg_replace($Y,$B,$M);}}return$M;}static function pluralizeIf($mC,$M){if($mC==1){return"1 $M";}else{return$mC.' '.self::pluralize($M);}}static function pluralize($M){if(in_array(strtolower($M),self::$uncountable,true)){return$M;}foreach(self::$irregular as$Y=>$B){$Y='/'.$Y.'$/i';if(preg_match($Y,$M)){return preg_replace($Y,$B,$M);}}foreach(self::$plural as$Y=>$B){if(preg_match($Y,$M)){return preg_replace($Y,$B,$M);}}return$M;}static function camelize($M,$EE=false){$SB=explode('_',$M);if($EE){$nC=count($SB)-1;$SB[$nC]=self::pluralize($SB[$nC]);}foreach($SB as&$a){$a=ucfirst($a);if(strlen($a)>1&&strlen($a)<=4){$LB=strtoupper($a);if(in_array($LB,self::$abbreviations,true)){$a=$LB;}}}return implode('',$SB);}static function flatten($M,$DE='_'){$Y='/([A-Z][A-Z0-9]*(?=$|[A-Z][a-z0-9])|[A-Za-z][a-z0-9]+)/';preg_match_all($Y,$M,$z);return strtolower(implode($DE,$z[0]));}}$TB=\Docx\Importer::getInstance();$TB->addClass(VENDOR_DIR.'/Parsedown.php','Parsedown');class Markdoc{static$meta_keys=['layout','date','created','title','slug','author','category','tags','comments'];protected$filepath='';protected$metadata=[];protected$metatext='';protected$markdown='';protected$htmldoc='';protected$headsize=-1;function __construct($OB){$this->filepath=$OB;}static function parseMetaLine($J){$j=explode(':',$J);if(count($j)===2){$j[0]=strtolower(trim($j[0]));if(in_array($j[0],self::$meta_keys,true)){$j[1]=trim($j[1]);return$j;}}}function normalizeMetaData(array&$X){if(!isset($X['title'])){$X['title']=pathinfo($this->filepath,PATHINFO_FILENAME);}if(!isset($X['author'])){$X['author']='';}if(isset($X['tags'])&&is_string($X['tags'])){$X['tags']=array_map('trim',explode(',',$X['tags']));}if(!isset($X['date'])){$X['date']=filemtime($this->filepath);}else if(!is_numeric($X['date'])){$X['date']=strtotime($X['date']);}return$this->metadata=&$X;}function parseMetaData($CE=false){if(!is_readable($this->filepath)){$this->metadata=['title'=>'Oh No'];$this->htmldoc='<h3>抱歉，找不到页面~!</h3>';$this->headsize=0;return$this->metadata;}$this->metatext='';$X=[];$c=fopen($this->filepath,'rb');if($c===false){return false;}$J=fgets($c);$J=$J?trim($J):'';$J=preg_replace('{^\xEF\xBB\xBF|\x1A}','',$J);while(!$J||!trim($J));$zB=0;while($bB=strlen($J)){$this->metatext.=$J."\n";if($bB>=3&&$J===str_repeat('-',$bB)){if($zB<=0){$zB=$bB;}else if($zB===$bB){$J='';break;}}else if($cC=self::parseMetaLine($J)){$X[$cC[0]]=$cC[1];}else{break;}$J=fgets($c);$J=$J?trim($J):'';}if($CE){$this->markdown=$J.fread($c,filesize($this->filepath));$this->headsize=0;}else{$this->markdown=$J;$this->headsize=ftell($c);}fclose($c);$this->metatext=trim($this->metatext);return$this->normalizeMetaData($X);}function getMetaData($_B=false){if($this->headsize<0){$this->parseMetaData(false);}if($_B===false){return$this->metadata;}else if(isset($this->metadata[$_B])){return$this->metadata[$_B];}}function getPageData(){$this->getMetaData(false);if($this->headsize>0||!$this->markdown){$U=file_get_contents($this->filepath);$this->markdown=substr($U,$this->headsize);$this->headsize=0;}if(!$this->htmldoc&&$this->markdown){$this->htmldoc=\Parsedown::instance()->text($this->markdown);}$BE=['metatext'=>$this->metatext,'markdown'=>$this->markdown,'htmldoc'=>$this->htmldoc,];return array_merge($this->metadata,$BE);}function update($AE,$_D){$U=$AE."\n\n".$_D;file_put_contents($this->filepath,$U,LOCK_EX);$this->parseMetaData(true);return$this;}}use TQ\Git\Repository\Repository as GitRepository;use TQ\Git\Cli\Binary as GitBinary;$TB=\Docx\Importer::getInstance();$TB->import('TQ',VENDOR_DIR.'/PHP-Stream-Wrapper-for-Git-1.0.1/src');class Repository extends GitRepository{static function open($AC,$_=null,$zD=false,$BC=null,$CC=true){if(empty($_)){$_=GitBinary::locateBinary()?:'git';}return parent::open($AC,$_,$zD,$BC,$CC);}static function buildRemotePath($FB,$jC='',$yD=''){if(Common::startsWith($FB,'http')&&!empty($jC)){$kC=$jC.':'.$yD.'@';$FB=str_replace('https://','https://'.$kC,$FB);$FB=str_replace('http://','http://'.$kC,$FB);}return$FB;}static function create($AC,$xD,$_=null,$BC=null,$CC=true){$lC=self::open($AC,$_,true,$BC,$CC);$lC->remote('add','origin',$xD);return$lC;}function commitMutely($wD,array$v=null,$vD=null,array$uD=[]){try{$this->commit($wD,$v,$vD,$uD);return true;}catch(\Exception$PB){return false;}}function __call($A,$C){$_=$this->getGit();$L=$this->getRepositoryPath();return$_->$A($L,$C);}}class Word{static$digits='0123456789';static$chars='〇一二三四五六七八九十百千万亿';static$caps='零壹贰叁肆伍陆柒捌玖拾佰仟萬億';protected$content='';function __construct($U=''){$this->content=$U;}static function slugify($A){return strtolower(str_replace(' ','-',$A));}static function num2char($fD,$LB=false){$TD=$LB?self::$caps:self::$chars;return self::mbStrtr(strval($fD),self::$digits,$TD);}static function mbStrtr($M,$IC,$RC){$IC=self::mbStrSplit($IC);$RC=self::mbStrSplit($RC);return str_replace($IC,$RC,$M);}static function mbStrSplit($M){$ED=self::hasNonASCII($M)?3:1;return str_split($M,$ED);}static function hasNonASCII($M){return preg_match('/[^\x20-\x7f]/',$M);}static function spell($eB,$LB=false){$_C=new\NumberFormatter('zh_CN',\NumberFormatter::SPELLOUT);$DC=$_C->format($eB);if($LB){$DC=self::mbStrtr($DC,self::$chars,self::$caps);}return$DC;}function b64decode($a){if(preg_match('!([A-Za-z0-9+/= ]+)!',$a,$z)){$a=$z[1];}return base64_decode($a);}static function randHash($p=6){$p=$p>32?32:$p;$JD=md5(mt_rand().time());$RD=substr($JD,0,$p);return$RD;}static function randString($p=6,$LD=2,$WB=''){if(empty($WB)){$WB='abcdefghijkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789';}srand((float)microtime()*1000000);$YC='';$cB=ceil($p/$LD);while($p>0){$WB=str_shuffle($WB);$YC.=substr($WB,0,$cB);$p-=$cB;$cB=min($p,$cB);}return$YC;}function fetchFirstURL(){if(preg_match('/^http[^\x23-\x76]/i',$this->content,$z)){return$z[1];}}function ver2int(){$MD=$this->getNumbers(false);$qB=array_map('intval',explode('.',$MD));$qB=array_pad($qB,3,0);return intval(vsprintf('%d%02d%02d',$qB));}function getNumbers($CD=true){$WC=preg_match_all('/[\d.]+/',$this->content,$z);if($WC===0||$WC===false){return false;}$eB=implode(current($z));return$CD?intval($eB):$eB;}}}
namespace Docx\Web{use Docx\Common;use Docx\Application;use Docx\Web\Response;class Handler{protected$app=null;protected$backend=null;protected$template='';protected$context=[];var$globals=['method'=>'get'];function __construct(Application&$yC,&$hB=null){$this->app=$yC;$this->backend=$hB;}function __toString(){$oB=$this->app->response;$oB->addFrameFile($this->template);$oB->addGlobals($this->globals);return$oB->render($this->context);}function __invoke(){$this->prepare();$NB=$this->globals['method'].'Action';$C=func_get_args();Common::execMethodArray($this,$NB,$C);$this->finish();return$this;}function prepare(){}function finish(){}function except($dC){return Response::abort(500);}}use Docx\Base\EnumType;class MimeType extends EnumType{const __prefix='EXT_';const __default=self::EXT_HTML;const EXT_HTML='text/html';const EXT_HTM='text/html';const EXT_SHTML='text/html';const EXT_CSS='text/css';const EXT_XML='text/xml';const EXT_GIF='image/gif';const EXT_JPEG='image/jpeg';const EXT_JPG='image/jpeg';const EXT_JS='application/javascript';const EXT_ATOM='application/atom+xml';const EXT_RSS='application/rss+xml';const EXT_MML='text/mathml';const EXT_TXT='text/plain';const EXT_JAD='text/vnd.sun.j2me.app-descriptor';const EXT_WML='text/vnd.wap.wml';const EXT_HTC='text/x-component';const EXT_PNG='image/png';const EXT_TIF='image/tiff';const EXT_TIFF='image/tiff';const EXT_WBMP='image/vnd.wap.wbmp';const EXT_ICO='image/x-icon';const EXT_JNG='image/x-jng';const EXT_BMP='image/x-ms-bmp';const EXT_SVG='image/svg+xml';const EXT_SVGZ='image/svg+xml';const EXT_WEBP='image/webp';const EXT_WOFF='application/font-woff';const EXT_JAR='application/java-archive';const EXT_WAR='application/java-archive';const EXT_EAR='application/java-archive';const EXT_JSON='application/json';const EXT_HQX='application/mac-binhex40';const EXT_DOC='application/msword';const EXT_PDF='application/pdf';const EXT_PS='application/postscript';const EXT_EPS='application/postscript';const EXT_AI='application/postscript';const EXT_RTF='application/rtf';const EXT_M3U8='application/vnd.apple.mpegurl';const EXT_XLS='application/vnd.ms-excel';const EXT_EOT='application/vnd.ms-fontobject';const EXT_PPT='application/vnd.ms-powerpoint';const EXT_WMLC='application/vnd.wap.wmlc';const EXT_KML='application/vnd.google-earth.kml+xml';const EXT_KMZ='application/vnd.google-earth.kmz';const EXT_7Z='application/x-7z-compressed';const EXT_CCO='application/x-cocoa';const EXT_JARDIFF='application/x-java-archive-diff';const EXT_JNLP='application/x-java-jnlp-file';const EXT_RUN='application/x-makeself';const EXT_PL='application/x-perl';const EXT_PM='application/x-perl';const EXT_PRC='application/x-pilot';const EXT_PDB='application/x-pilot';const EXT_RAR='application/x-rar-compressed';const EXT_RPM='application/x-redhat-package-manager';const EXT_SEA='application/x-sea';const EXT_SWF='application/x-shockwave-flash';const EXT_SIT='application/x-stuffit';const EXT_TCL='application/x-tcl';const EXT_TK='application/x-tcl';const EXT_DER='application/x-x509-ca-cert';const EXT_PEM='application/x-x509-ca-cert';const EXT_CRT='application/x-x509-ca-cert';const EXT_XPI='application/x-xpinstall';const EXT_XHTML='application/xhtml+xml';const EXT_XSPF='application/xspf+xml';const EXT_ZIP='application/zip';const EXT_BIN='application/octet-stream';const EXT_EXE='application/octet-stream';const EXT_DLL='application/octet-stream';const EXT_DEB='application/octet-stream';const EXT_DMG='application/octet-stream';const EXT_ISO='application/octet-stream';const EXT_IMG='application/octet-stream';const EXT_MSI='application/octet-stream';const EXT_MSP='application/octet-stream';const EXT_MSM='application/octet-stream';const EXT_DOCX='application/vnd.openxmlformats-officedocument.wordprocessingml.document';const EXT_XLSX='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';const EXT_PPTX='application/vnd.openxmlformats-officedocument.presentationml.presentation';const EXT_MID='audio/midi';const EXT_MIDI='audio/midi';const EXT_KAR='audio/midi';const EXT_MP3='audio/mpeg';const EXT_OGG='audio/ogg';const EXT_M4A='audio/x-m4a';const EXT_RA='audio/x-realaudio';const EXT_3GPP='video/3gpp';const EXT_3GP='video/3gpp';const EXT_TS='video/mp2t';const EXT_MP4='video/mp4';const EXT_MPEG='video/mpeg';const EXT_MPG='video/mpeg';const EXT_MOV='video/quicktime';const EXT_WEBM='video/webm';const EXT_FLV='video/x-flv';const EXT_M4V='video/x-m4v';const EXT_MNG='video/x-mng';const EXT_ASX='video/x-ms-asf';const EXT_ASF='video/x-ms-asf';const EXT_WMV='video/x-ms-wmv';const EXT_AVI='video/x-msvideo';function getConstants(){return['EXT_HTML','EXT_HTM','EXT_SHTML','EXT_CSS','EXT_XML','EXT_GIF','EXT_JPEG','EXT_JPG','EXT_JS','EXT_ATOM','EXT_RSS','EXT_MML','EXT_TXT','EXT_JAD','EXT_WML','EXT_HTC','EXT_PNG','EXT_TIF','EXT_TIFF','EXT_WBMP','EXT_ICO','EXT_JNG','EXT_BMP','EXT_SVG','EXT_SVGZ','EXT_WEBP','EXT_WOFF','EXT_JAR','EXT_WAR','EXT_EAR','EXT_JSON','EXT_HQX','EXT_DOC','EXT_PDF','EXT_PS','EXT_EPS','EXT_AI','EXT_RTF','EXT_M3U8','EXT_XLS','EXT_EOT','EXT_PPT','EXT_WMLC','EXT_KML','EXT_KMZ','EXT_7Z','EXT_CCO','EXT_JARDIFF','EXT_JNLP','EXT_RUN','EXT_PL','EXT_PM','EXT_PRC','EXT_PDB','EXT_RAR','EXT_RPM','EXT_SEA','EXT_SWF','EXT_SIT','EXT_TCL','EXT_TK','EXT_DER','EXT_PEM','EXT_CRT','EXT_XPI','EXT_XHTML','EXT_XSPF','EXT_ZIP','EXT_BIN','EXT_EXE','EXT_DLL','EXT_DEB','EXT_DMG','EXT_ISO','EXT_IMG','EXT_MSI','EXT_MSP','EXT_MSM','EXT_DOCX','EXT_XLSX','EXT_PPTX','EXT_MID','EXT_MIDI','EXT_KAR','EXT_MP3','EXT_OGG','EXT_M4A','EXT_RA','EXT_3GPP','EXT_3GP','EXT_TS','EXT_MP4','EXT_MPEG','EXT_MPG','EXT_MOV','EXT_WEBM','EXT_FLV','EXT_M4V','EXT_MNG','EXT_ASX','EXT_ASF','EXT_WMV','EXT_AVI',];}}@session_start();class Request{function __call($A,$PD){if(!Common::startsWith($A,'get')){return;}$A=strtolower(substr($A,3));@list($D,$S,$mB)=$PD;switch($A){case'server':case'session':$B=self::getValue($A,$D,$S);break;case'cookie':case'env':case'post':$B=self::getInput($A,$D,$S);break;default:$H=self::detectInput($mB);if($H===INPUT_REQUEST||$H===INPUT_SESSION){$B=self::getValue($mB,$D,$S,$A);}else{$B=self::getInput($mB,$D,$S,$A);}break;}return$B;}protected static function detectInput($H='REQUEST'){$H=strtoupper($H?:'REQUEST');return constant('INPUT_'.$H);}protected static function detectType($b='string'){if(!is_array($b)){if($b==='raw'){return filter_id('unsafe_raw');}else{return filter_id($b?:'string');}}foreach($b as$D=>$O){if(is_array($O)){$b[$D]['filter']=self::detectType($O['filter']);}else{$b[$D]=self::detectType($O);}}return$b;}static function setValue($D,$F,$H='REQUEST'){$H=self::detectInput($H);switch($H){case INPUT_REQUEST:$_REQUEST[$D]=$F;break;case INPUT_COOKIE:$_COOKIE[$D]=$F;break;case INPUT_SESSION:$_SESSION[$D]=$F;break;case INPUT_ENV:$_ENV[$D]=$F;break;}}static function getValue($H,$D,$S=null,$O='string'){$H=self::detectInput($H);if(is_null($H)){return;}if($H===INPUT_REQUEST){$H=$_REQUEST;}elseif($H===INPUT_SESSION){$H=$_SESSION;}elseif($H===INPUT_SERVER){$H=$_SERVER;}$O=self::detectType($O);if(is_array($O)||is_array($S)){$QC=[$D=>['filter'=>$O,'flags'=>FILTER_FORCE_ARRAY]];$EB=filter_var_array($H,$QC,true);return isset($EB[$D])?$EB[$D]:$S;}else{$F=isset($H[$D])?$H[$D]:$S;return filter_var($F,$O);}}static function getInput($H,$D,$S=null,$O='string'){$H=self::detectInput($H);if(is_null($H)){return;}$O=self::detectType($O);if(is_array($O)||is_array($S)){$QC=[$D=>['filter'=>$O,'flags'=>FILTER_FORCE_ARRAY]];$F=filter_input_array($H,$QC,true);}else{$F=filter_input($H,$D,$O);}return is_null($F)?$S:$F;}static function pop($D,$S=null,$O='string'){$F=self::getValue('REQUEST',$D,$S,$O);if(isset($_REQUEST[$D])){unset($_REQUEST[$D]);}return$F;}static function all($b='string',$H='REQUEST'){$H=self::detectInput($H);if(is_null($H)){return;}$b=self::detectType($b);if($H===INPUT_REQUEST){return filter_var_array($_REQUEST,$b);}elseif($H===INPUT_SESSION){return filter_var_array($_SESSION,$b);}elseif($H===INPUT_SERVER){return filter_var_array($_SERVER,$b);}else{return filter_input_array($H,$b,true);}}static function getPath($VC=null){if($VC){return self::pop($VC,'/');}$W=self::getInput('SERVER','REQUEST_URI');$W=parse_url($W,PHP_URL_PATH);$A=self::getInput('SERVER','SCRIPT_NAME');if(empty($W)||$W.'index.php'===$A){$L='';}else if(Common::startsWith($W,$A)){$L=substr($W,strlen($A));}return rtrim($L,'/ ').'/';}static function getMethod(){$P=self::getInput('SERVER','REQUEST_METHOD','GET');return strtolower($P);}static function getClientIP(){$MC=['HTTP_CLIENT_IP','HTTP_X_REAL_IP','HTTP_X_FORWARDED_FOR','HTTP_X_FORWARDED','HTTP_X_CLUSTER_CLIENT_IP','HTTP_FORWARDED_FOR','HTTP_FORWARDED','REMOTE_ADDR',];foreach($MC as$D){$LC=self::getValue('SERVER',$D,'');if($LC&&strlen($LC)>=7){break;}}return$LC;}static function getArgv(){if(Common::isCLI()){return self::getValue('SERVER','argv',[],'string');}}}use Docx\Web\MimeType;class Response{protected$frame_files=[];protected$stack=[];var$blocks=[];var$globals=[];var$mime_type=null;var$charset='';function __construct($FD='',array$JC=[]){$this->addFrameFile($FD);$this->addGlobals($JC);}static function abort($uB=500){return http_response_code($uB);}static function header($A,$F,$ID=true,$uB=200){if(!headers_sent()){$J=empty($A)?'':strval($A).': ';$J.=is_array($F)?implode(' ',$F):strval($F);header($J,$ID,$uB);}}static function redirect($OD='',$QD=false){$BD=$QD?301:302;self::header('Location',$OD,true,$BD);return die();}function addGlobals(array$JC){$this->globals=array_merge($this->globals,$JC);return$this;}function addFrameFile($q){if($q&&is_readable($q)){$this->frame_files[]=$q;}return$this;}function extendTpl($GC){if($GC&&is_readable($GC)){array_unshift($this->frame_files,$GC);}return$this;}function includeTpl($q){if($q&&is_readable($q)){extract($this->globals);include$q;}}function blockStart($A='content'){array_push($this->stack,$A);ob_start();}function blockEnd(){$zC=trim(ob_get_clean());if($A=array_pop($this->stack)){$this->blocks[$A]=$zC;}}function block($A='content'){if(isset($this->blocks[$A])){return$this->blocks[$A];}}function setContentType($O,$KD='utf-8'){$this->mime_type=new MimeType($O);$this->charset=strval($KD);$J=$this->mime_type.'; charset='.$this->charset;self::header('Content-Type',$J);return$this;}function render(array$N=[]){extract($this->globals);extract($N);ob_start();while($q=array_pop($this->frame_files)){include$q;}return trim(ob_get_clean());}}class Router{static$aliases=['<int>'=>'([0-9\-]+)','<float>'=>'([0-9\.\-]+)','<num>'=>'([0-9\.\-,]*)','<string>'=>'([a-z0-9\-_]+)','<page>'=>'([0-9]*)/?([0-9]*)/?','<path>'=>'([a-z0-9\-_/]*)','<word>'=>'([^/]*)',];protected static$current=null;protected$filename='';protected$prefix='';protected$children=[];protected$items=[];protected function __construct($K='',$V='/'){$AD=['//','/','\\'];$this->filename=str_replace($AD,DIRECTORY_SEPARATOR,$K);$this->prefix=rtrim($V,'/');self::$current=$this;if($this->filename&&is_readable($this->filename)){include_once$this->filename;}}static function getCurrent(){return self::$current?:new self();}static function toPrefix($K){$TC=strstr(basename($K),'.');$HD=substr($K,0,-strlen($TC));$V=str_replace(DIRECTORY_SEPARATOR,'/',$HD);return strtolower(rtrim($V,'/'));}static function compileUrl($W,$ND=false){$W=preg_quote(strtolower(rtrim($W,'/')));$MC=array_map('preg_quote',array_keys(self::$aliases));$EB=array_values(self::$aliases);$W=str_replace($MC,$EB,$W);$tB=($ND===false)?'':'(.*)?';return'!^'.$W.'/?'.$tB.'$!';}function route($L,$Q){$MB=self::compileUrl($L);if(func_num_args()>2){$iB=array_slice(func_get_args(),1);}else{$iB=[$Q];}$this->items[$MB]=$iB;return$MB;}function expose($o,$tB='*.php'){$o=rtrim($o,DIRECTORY_SEPARATOR);$YB=glob($o.'/'.$tB,GLOB_BRACE);if(!empty($YB)){$GD=strlen($o);foreach($YB as$K){$V=self::toPrefix(substr($K,$GD));$this->children[$V]=$K;}}return$this;}function dispatch($L,$XC=false){$L=rtrim(strtolower($L),' /').'/';if(!$XC){krsort($this->children);}foreach($this->children as$V=>$K){if(Common::startsWith($L,$V)){$xB=new self($K,$V);$L=substr($L,strlen($V));return$xB->dispatch($L);}}if(!$XC){krsort($this->items);}foreach($this->items as$MB=>$iB){if(preg_match($MB,$L,$C)===1){$W=$this->prefix.array_shift($C);return['handlers'=>$iB,'args'=>$C,'url'=>$W,'rule'=>$MB,];}}return;}}use Docx\Cache\RedisCache;use \SessionHandlerInterface;class SessionHandler implements SessionHandlerInterface{const PREFIX='PHPSESSID:';protected static$instance=null;protected$cache=null;protected$timeout=0;function __construct(RedisCache&$t,$T=1800){$this->cache=$t;$this->timeout=intval($T);if(version_compare(PHP_VERSION,'6.0.0')<0){session_set_save_handler($this);}@session_start();}static function getInstance($T=1800){if(!self::$instance&&class_exists('\\Redis')){$t=new RedisCache(new\Redis(),'object');if($t->prepare('ping')){self::$instance=new self($t,$T);}}return self::$instance;}function getSessID($BB){return self::PREFIX.$BB;}function open($PE,$A){}function close(){}function read($BB){return$this->cache->read($this->getSessID($BB));}function write($BB,$DD){$this->cache->write($this->getSessID($BB),$DD);}function destroy($BB){return$this->cache->remove($this->getSessID($BB));}function gc($QE){}}}