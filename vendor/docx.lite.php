<?php
namespace Docx{use Docx\Common;use Docx\Web\Router;class Application{use\Docx\Base\Behavior;protected static$properties=['request'=>'\\Docx\\Web\\Request','response'=>'\\Docx\\Web\\Response','session'=>'\\Docx\\Web\\SessionHandler',];protected$shortcuts=[];var$route_key='';var$settings=[];function __construct(array$CB=[]){if(version_compare(PHP_VERSION,'7.0.0')<0){Common::throwWarnings();}if(isset($CB['timezone'])){date_default_timezone_set($CB['timezone']);}if(Common::isCLI()){set_time_limit(0);ini_set('display_errors',1);if(isset($CB['memory_limit'])){ini_set('memory_limit',$CB['memory_limit']);}}$VB=\Docx\Importer::getInstance();$this->installRef($VB,['import','introduce','addClass']);$CD=Router::getCurrent();$this->installRef($CD,['dispatch','expose']);$this->route_key=isset($CB['route_key'])?$CB['route_key']:'';$this->settings=$CB;}function __get($A){$A=strtolower($A);$lB=$this->prop($A);if(!$lB&&array_key_exists($A,self::$properties)){$G=self::$properties[$A];$lB=Common::execConstructArray($G);$this->setProp($A,$lB);}return$lB;}function __call($A,$C){$A=strtolower($A);if(isset($this->shortcuts[$A])){$mC=$this->shortcuts[$A];if(is_array($mC)){@list($MB,$A)=$mC;}else{$MB=&$this->shortcuts[$A];}return Common::execMethodArray($MB,$A,$C);}}static function setLanguage($DD,$fC='zh_CN',$aC='messages'){putenv('LANG='.$fC);setlocale(LC_ALL,$fC);if(function_exists('bindtextdomain')){bindtextdomain($aC,$DD);textdomain($aC);}}function install($MB,array$SC){foreach($SC as$kB=>$O){$kB=strtolower(is_numeric($kB)?$O:$kB);$this->shortcuts[$kB]=[$MB,$O];}return$this;}function installRef(&$MB,array$SC){foreach($SC as$O){$this->shortcuts[strtolower($O)]=&$MB;}return$this;}function route($H,$R){$IC=Router::getCurrent();$C=func_get_args();return Common::execMethodArray($IC,'route',$C);}function execute($H,$O){$KB=$this->dispatch($H);if(!$KB){return die();}$jB=null;foreach($KB['handlers']as$R){if(empty($R)){continue;}if(is_string($R)&&class_exists($R,true)){$R=new$R($this,$jB);}$jB=$R;}if(!($R instanceof\Closure)){$R->globals['method']=$O;$R->globals['path']=$H;$R->globals['url']=$KB['url'];$R->globals['rule']=$KB['rule'];$R->globals['args']=$KB['args'];}$LC='';if(is_callable($R)){try{$LC=Common::execFunctionArray($R,$KB['args']);}catch(\Exception$TC){if(method_exists($R,'except')){$LC=$R->except($TC);}}}return die(strval($LC));}function run(){if(Common::isCLI()){$GE=$this->request->getArgv();$H='/'.implode('/',array_slice($GE,1));$O='exec';}else{$H=$this->request->getPath($this->route_key);$O=$this->request->getMethod();if($O==='post'){$O=$this->request->getString('_method','post');}}return$this->execute($H,$O);}}final class Common{static function isCLI(){return strtolower(php_sapi_name())==='cli';}static function isWinNT(){return strtolower(substr(PHP_OS,0,3))==='win';}static function throwWarnings(){set_error_handler(function($IE,$JE,$LE,$ME,array$PE=[]){if(0===error_reporting()){return false;}throw new\ErrorException($JE,0,$IE,$LE,$ME);},E_WARNING|E_CORE_WARNING|E_COMPILE_WARNING);}static function startsWith($iB,$QB){return strncmp($iB,$QB,strlen($QB))===0;}static function endsWith($iB,$QB){$wB=strlen($QB);return$wB===0||(strlen($iB)>=$wB&&substr_compare($iB,$QB,-$wB)===0);}static function replaceWith($V,array$N=[],$U='',$XC=''){if(empty($N)){return$V;}if(empty($U)&&empty($XC)){$CC=&$N;}else{$CC=[];foreach($N as$D=>&$E){$CC[$U.$D.$XC]=$E;}}$V=strtr($V,$CC);return$V;}static function convertString($a,$JB='UTF-8'){$JB=strtoupper($JB);if(function_exists('mb_detect_encoding')){return mb_detect_encoding($a,$JB,true)?$a:mb_convert_encoding($a,$JB,'UTF-8, GBK');}elseif(function_exists('iconv')){$OE=$JB==='UTF-8'?'GBK':'UTF-8';return iconv($OE,$JB.'//IGNORE',$a);}}static function execFunctionArray($c,array$C=[]){switch(count($C)){case 0:return$c();case 1:return$c($C[0]);case 2:return$c($C[0],$C[1]);case 3:return$c($C[0],$C[1],$C[2]);case 4:return$c($C[0],$C[1],$C[2],$C[3]);case 5:return$c($C[0],$C[1],$C[2],$C[3],$C[4]);default:if(is_object($c)){$e=new\ReflectionMethod($c,'__invoke');return$e->invokeArgs($c,$C);}elseif(is_callable($c)){$e=new\ReflectionFunction($c);return$e->invokeArgs($C);}}}static function execMethodArray($n,$O,array$C=[]){if(is_object($n)){switch(count($C)){case 0:return$n->{$O}();case 1:return$n->{$O}($C[0]);case 2:return$n->{$O}($C[0],$C[1]);case 3:return$n->{$O}($C[0],$C[1],$C[2]);case 4:return$n->{$O}($C[0],$C[1],$C[2],$C[3]);case 5:return$n->{$O}($C[0],$C[1],$C[2],$C[3],$C[4]);}}if(method_exists($n,$O)){$e=new\ReflectionMethod($n,$O);if($e->isPublic()&&!$e->isAbstract()){if($e->isStatic()){return$e->invokeArgs(null,$C);}else{return$e->invokeArgs($n,$C);}}}}static function execConstructArray($G,array$C=[]){if(method_exists($G,'getInstance')){$e=new\ReflectionMethod($G,'getInstance');return$e->invokeArgs(null,$C);}switch(count($C)){case 0:return new$G();case 1:return new$G($C[0]);case 2:return new$G($C[0],$C[1]);case 3:return new$G($C[0],$C[1],$C[2]);case 4:return new$G($C[0],$C[1],$C[2],$C[3]);case 5:return new$G($C[0],$C[1],$C[2],$C[3],$C[4]);default:if(class_exists($G)){$e=new\ReflectionClass($G);return$e->newInstanceArgs($C);}}}}final class Importer{private static$instance=null;private$classes=[];private$prefixes=[];private$sepeators='';private$sepeator_array=[];private function __construct($uC='\\'){$this->sepeators=$uC;$this->sepeator_array=str_split($uC);$this->prefixes[__NAMESPACE__]=__DIR__;}static function getInstance(){if(is_null(self::$instance)){self::$instance=new self();self::$instance->register();}return self::$instance;}static function exists($G,$AC=true){return class_exists($G,$AC)||interface_exists($G,$AC)||trait_exists($G,$AC);}static function requireFile($v,$tD=false){if(empty($v)||!file_exists($v)){return false;}if($tD){require_once$v;}else{require$v;}return true;}function register(){return spl_autoload_register(array($this,'autoload'));}function autoload($G){$G=trim($G,$this->sepeators);if(isset($this->classes[$G])){if(self::requireFile($this->classes[$G])){return self::exists($G,false);}}$sD=$this->matchPrefix($G);return$sD===true;}function matchPrefix($G){$XB='';foreach($this->prefixes as$h=>$H){if(substr($G,0,strlen($h))===$h){if(empty($h)){$XB=$G;}else{$XB=substr($G,strlen($h)+1);}$xB=strtok($XB,$this->sepeators);break;}}if(empty($XB)){return false;}$wC=$H.DIRECTORY_SEPARATOR;$wC.=str_replace($this->sepeator_array,DIRECTORY_SEPARATOR,$XB);if(self::requireFile($wC.'.php')){if(self::exists($G,false)){return true;}}while($xB){$H.=DIRECTORY_SEPARATOR.$xB;if(self::requireFile($H.'.php')){if(self::exists($G,false)){return true;}}if(!file_exists($H)){return false;}$xB=strtok($this->sepeators);}}function addClass($K,$G){$tC=func_get_args();$K=array_shift($tC);if(is_readable($K)){foreach($tC as$G){$this->classes[trim($G,'\\')]=$K;}}krsort($this->classes);return$this;}function introduce($h,$S){$h=trim($h,'\\');$S=rtrim($S,'\\/');$this->prefixes[$h]=$S;krsort($this->prefixes);return$this;}function import($h,$S){$bD=str_replace($this->sepeator_array,DIRECTORY_SEPARATOR,$h);$S.=DIRECTORY_SEPARATOR.$bD;return$this->introduce($h,$S);}}\Docx\Importer::getInstance();}
namespace Docx\Base{use Docx\Event\Sender;use Docx\Event\Listener;trait Behavior{protected$event_sender=[];function prop($A){if(property_exists($this,$A)){return$this->$A;}}function setProp($A,$E){$this->$A=$E;return$this;}function event($A){if(isset($this->event_sender[$A])){return$this->event_sender[$A];}}function addEvent($A,$sB){if(!$this->event($A)){$this->event_sender[$A]=new Sender();}$j=new Listener($sB);$this->event_sender[$A]->attach($j);return$this;}}use Docx\Common;abstract class EnumType{const __prefix='';const __default=null;protected$name='__default';protected$value=null;function __construct($WB='__default',$HB=false){$this->value=self::getDefault();if(is_int($WB)&&is_numeric($WB)){$this->initByValue($WB,$HB);}elseif(is_string($WB)){$this->initByName($WB,$HB);}}static function getPrefix(){return static::__prefix;}static function getDefault(){return static::__default;}function initByValue($E,$HB=false){$dD=$this->getConstList(true);$D=array_search($E,$dD,$HB);if($D!==false){$this->name=$D;$this->value=$E;}}function initByName($A='__default',$HB=false){if($HB===false){$A=strtoupper($A);$U=self::getPrefix();if($U&&$A!=='__default'){if(!Common::startsWith($A,$U)){$A=$U.$A;}}}$G=get_class($this);$E=constant($G.'::'.$A);if(!is_null($E)){$this->name=$A;$this->value=$E;}}function __toString(){return strval($this->getValue());}function getName(){return$this->name;}function getValue(){return$this->value;}function getConstList($fD=false){$B=[];if($fD){$B['__default']=self::getDefault();}$DC=$this->getConstants();if($DC&&is_array($DC)){$G=get_class($this);foreach($DC as$A){$B[$A]=constant($G.'::'.$A);}}return$B;}abstract function getConstants();}use Docx\Base\Storage;class Factory{protected$storage=null;protected$objects=[];function __construct(Storage&$iD){$this->storage=$iD;}function normalize($G){return rtrim($G,'\\');}function create($A,$D='default'){$EC=$this->storage->getSectionOnce($A);$G=$this->normalize($EC->getItem('class'));$F=$EC->getArray($D);if($D!=='default'){$F=array_merge($EC->getArray('default'),$F);}if(class_exists($G)){foreach($F as$qC=>&$E){if(starts_with($qC,'@')){$E=$this->load(trim($qC,'@'),$E);}}return exec_construct_array($G,array_values($F));}}function load($A,$D='default'){if(!isset($this->objects[$A])){$this->objects[$A]=[];if(!isset($this->objects[$A][$D])){$this->objects[$A][$D]=$this->create($A,$D);}}return$this->objects[$A][$D];}}use ArrayAccess;use Countable;class Storage implements Countable,ArrayAccess{protected$data=[];protected$insensitive=false;function __construct($F=null,$lD=false){$this->insensitive=$lD;$this->update($F);}function update($F){if($F instanceof self){$F=$F->data;}else{$F=empty($F)?[]:(array)$F;}if($this->insensitive){$F=array_change_key_case($F);}$this->data=array_merge($this->data,$F);}function count(){return count($this->data);}function offsetExists($Z){if($this->insensitive){$Z=strtolower($Z);}return array_key_exists($Z,$this->data);}function offsetGet($Z){if($this->insensitive){$Z=strtolower($Z);}return$this->data[$Z];}function offsetSet($Z,$E){if($this->insensitive){$Z=strtolower($Z);}$this->data[$Z]=$E;}function offsetUnset($Z){if($this->insensitive){$Z=strtolower($Z);}unset($this->data[$Z]);}function getItem($A,$Q=null){$oC=@$this->offsetGet($A);return is_null($oC)?$Q:$oC;}function getArray($A,array$Q=[]){$F=$this->getItem($A);return is_array($F)?$F:$Q;}function getSection($A){$F=$this->getArray($A,[]);return new self($F);}function getSectionOnce($A){$F=$this->getItem($A);if(!($F instanceof self)){$F=new self($F);$this->offsetSet($A,$F);}return$F;}}}
namespace Docx\Event{use Exception;class EventFailed extends Exception{}use SplSubject;use SplObserver;use Docx\Common;class Listener implements SplObserver{var$callback=null;function __construct($sB=null){$this->callback=$sB;}function update(SplSubject$x){$this->reply($x->message,$x);}function reply(array&$J,$x=null){if($this->callback){return Common::execFunctionArray($this->callback,$J);}}}class Sender implements SplSubject{protected$listeners=[];var$message=[];function attach(SplObserver$j){$this->listeners[]=$j;}function detach(SplObserver$j){$D=array_search($j,$this->listeners,true);if($D!==false){$this->detachKey($D);}}function detachKey($D){unset($this->listeners[$D]);}function notify(){foreach($this->listeners as&$j){try{$j->update($this);}catch(EventFailed$OB){continue;}}}function emit(){$this->message=func_get_args();$nC=[];foreach($this->listeners as$nD=>&$j){try{$nC[$nD]=$j->reply($this->message,$this);}catch(EventFailed$OB){continue;}}return$nC;}function emitOnce(){$this->message=func_get_args();$lC=null;foreach($this->listeners as&$j){try{$lC=$j->reply($this->message,$this);}catch(EventFailed$OB){continue;}break;}return$lC;}}}
namespace Docx\Cache{use Docx\Event\EventFailed;use Docx\Event\Listener;abstract class BaseCache extends Listener{const OP_READ=0;const OP_WRITE=1;const OP_REMOVE=2;const OP_CUSTOM=3;function reply(array&$J,$x=null){$B=null;list($TB,$A)=$J;switch($TB){case self::OP_READ:$B=$this->read($A);break;case self::OP_WRITE:$E=$J[2];$T=$J[3];$B=$this->write($A,$E,$T);break;case self::OP_REMOVE:$B=$this->remove($A);break;default:throw new EventFailed('Operation not supported!');}return$B;}abstract function prepare($A);abstract function read($A);abstract function write($A,$E,$T=0);abstract function remove($A);}use Docx\Event\Sender;class CacheBox extends Sender{use\Docx\Base\Behavior;protected$timeout=-1;function __construct(array$F=[],$T=0){foreach($F as$D=>$E){$this->$D=$E;}$this->setTimeout($T);}function setTimeout($T){$T=intval($T);if($T>0){$this->timeout=$T;}else{$this->timeout=-1;}return$this;}function get($A,$Q=null){$B=$this->emitOnce(BaseCache::OP_READ,$A);if(is_null($B)){$B=$Q;}$this->setProp($A,$B);return$B;}function put($A,$E){if(is_null($E)){$this->emit(BaseCache::OP_REMOVE,$A);}else{$this->emit(BaseCache::OP_WRITE,$A,$E,$this->timeout);}return$this->setProp($A,$E);}}class FileCache extends BaseCache{protected$filename='';protected$dir='';protected$ext='';function __construct($S=false,$kC='.php'){if(empty($S)){$this->dir=sys_get_temp_dir();}else{$this->dir=rtrim($S,DIRECTORY_SEPARATOR);@mkdir($this->dir,0755,true);}$this->ext='.'.ltrim(strtolower($kC),'.');}static function dumpYaml($F){if(extension_loaded('yaml')){return yaml_emit($F,YAML_UTF8_ENCODING,YAML_LN_BREAK);}else if(class_exists('\\Symfony\\Component\\Yaml\\Yaml')){return\Symfony\Component\Yaml\Yaml::dump($F);}}static function parseYaml($F){if(extension_loaded('yaml')){return yaml_parse($F);}else if(class_exists('\\Symfony\\Component\\Yaml\\Yaml')){return\Symfony\Component\Yaml\Yaml::parse($F);}}function prepare($A){$this->filename=$this->dir.DIRECTORY_SEPARATOR.$A.$this->ext;if(!is_readable($this->filename)){touch($this->filename);}if($this->ext==='.yml'||$this->ext==='.yaml'){}return true;}function read($A){$this->prepare($A);$m=filesize($this->filename);if($m===false||$m===0){return;}if($this->ext==='.php'){return include$this->filename;}else{$AB=file_get_contents($this->filename);return$this->decode($AB);}}function write($A,$E,$T=0){$this->prepare($A);$F=$this->encode($E,$A);$m=file_put_contents($this->filename,$F,LOCK_EX);return$m&&$m>0;}function remove($A){$this->prepare($A);if(file_exists($this->filename)){return unlink($this->filename);}}protected function decode($AB){switch($this->ext){case'.txt':case'.htm':case'.html':$B=$AB;break;case'.json':$B=json_decode($AB,true);break;case'.yml':case'.yaml':$B=self::parseYaml($AB);break;}return$B;}protected function encode($F){switch($this->ext){case'.txt':case'.htm':case'.html':$B=$F;break;case'.php':$AB=var_export($F,true);$B="<?php \nreturn ".$AB.";\n";break;case'.json':$B=json_encode($F);break;case'.yml':case'.yaml':$B=self::dumpYaml($F);break;}return$B;}}class MatrixCache extends BaseCache{protected$filename='';protected$dir='';protected$ext='';protected$delimiter='';protected$at_least=0;function __construct($S=false,$kC='.csv',$EE="\t",$UD=0){if(empty($S)){$this->dir=sys_get_temp_dir();}else{$this->dir=rtrim($S,DIRECTORY_SEPARATOR);@mkdir($this->dir,0755,true);}$this->ext='.'.ltrim(strtolower($this->ext),'.');$this->delimiter=$EE?:"\t";$this->at_least=intval($UD);}function prepare($A){$this->filename=$this->dir.DIRECTORY_SEPARATOR.$A.$this->ext;if(!is_readable($this->filename)){touch($this->filename);}return true;}function read($A){$this->prepare($A);$m=filesize($this->filename);if($m===false||$m===0){return;}$F=[];$d=fopen($this->filename,'rb');if($d!==false){do{$L=fgetcsv($d,0,$this->delimiter);if(is_null($L)||$L===false){break;}if(is_null($L[0])){$L=[];}elseif($this->at_least>0){if(count($L)<$this->at_least){continue;}}$F[]=$L;}while(1);fclose($d);}return$F;}function write($A,$E,$T=0){$this->prepare($A);$d=fopen($this->filename,'wb');if($d===false||!is_array($E)){return false;}foreach($E as$ZB){fputcsv($d,$ZB,$this->delimiter);}fclose($d);return true;}function remove($A){$this->prepare($A);if(file_exists($this->filename)){return unlink($this->filename);}}}use Docx\Common;class RedisCache extends BaseCache{const SHAPE_INT='int';const SHAPE_FLOAT='float';const SHAPE_STRING='string';const SHAPE_ARRAY='array';const SHAPE_OBJECT='object';const SHAPE_DATETIME='datetime';protected$redis=null;protected$shape='';function __construct($rD,$qD='string'){$this->redis=$rD;$this->shape=$qD;}function prepare($A){try{$this->redis->ping();return true;}catch(\Exception$OB){return false;}}function reply(array&$J,$x=null){$B=null;list($TB,$O)=$J;if($TB===self::OP_CUSTOM){$C=array_slice($J,2);$B=Common::execMethodArray($this,$O,$C);}else{$B=parent::reply($J,$x);}return$B;}function read($A){$this->prepare($A);if($this->shape===self::SHAPE_OBJECT){$F=$this->redis->hGetAll($A);}elseif($this->shape===self::SHAPE_ARRAY){$F=$this->redis->lRange($A,0,-1);}else{$F=$this->redis->get($A);}return$F;}function write($A,$E,$T=0){$this->prepare($A);if($this->shape===self::SHAPE_OBJECT){foreach($E as$D=>$HC){$this->redis->hSet($A,$D,$HC);}}elseif($this->shape===self::SHAPE_ARRAY){foreach($E as$HC){$this->redis->lPush($A,$HC);}}else{$this->redis->set($A,$E);}if($T>0){$this->redis->expire($A,$T);}return true;}function remove($A){$this->prepare($A);$pD=$this->redis->del($A);return$pD>0;}function incre($A,$r=1){$this->prepare($A);$r=abs($r);if($r===1){return$this->redis->incre($D);}else{return$this->redis->increBy($D,$r);}}function decre($A,$r=1){$this->prepare($A);$r=abs($r);if($r===1){return$this->redis->decre($D);}else{return$this->redis->decreBy($D,$r);}}}}
namespace Docx\Log{use PDO;use Docx\Event\Listener;class DBLogger extends Listener{const ZONE_INTERVAL=28800;protected$pdo=null;protected$last_hour=0;function __construct(PDO$oD){$this->pdo=$oD;}function __destruct(){unset($this->pdo);}function getTable($cB){$FB='t_log_'.date('Ymd',$cB);if($cB-$this->last_hour>=self::ZONE_INTERVAL){$this->last_hour=$cB-$cB%self::ZONE_INTERVAL;$JC='CREATE TABLE IF NOT EXISTS %s LIKE %s';$KC=sprintf($JC,$FB,'t_log');$this->pdo->exec($KC);}return$FB;}function insertRow($FB,array&$ZB){$mD=implode(',',array_keys($ZB));$GB=implode("','",array_values($ZB));$JC="INSERT INTO %s(%s) VALUES('%s')";$KC=sprintf($JC,$FB,$mD,$GB);$this->pdo->exec($KC);}function reply(array&$J,$x=null){@list($V,$f)=$J;$FB=$this->getTable($f['moment']);$f['moment']=date('Y-m-d H:i:s',$f['moment']);$f['content']=$V;$this->insertRow($FB,$f);}}defined('LOG_WRITE_FILE_FREQ')or define('LOG_WRITE_FILE_FREQ',1);class FileLogger extends Listener{protected$filepath='';protected$records=[];function __construct($t=false){if($t===false){$t=realpath('./logs');}@mkdir($t,0777,true);$this->filepath=$t.DIRECTORY_SEPARATOR.'%s.log';}function __destruct(){$this->writeFiles();unset($this->records);}function writeFiles(){foreach($this->records as$K=>&$pC){$v=sprintf($this->filepath,$K);$kD=implode('',$pC);$m=file_put_contents($v,$kD,FILE_APPEND|LOCK_EX);if($m!==false){$pC=[];}}}function reply(array&$J,$x=null){@list($V,$f)=$J;$K=$f['name'].'_'.date('Ymd',$f['moment']);$f['moment']=date('Y-m-d H:i:s',$f['moment']);$jD=implode("\t",$f)."\t".$V;if(!isset($this->records[$K])){$this->records[$K]=[];}array_push($this->records[$K],$jD.PHP_EOL);if(LOG_WRITE_FILE_FREQ>=1||LOG_WRITE_FILE_FREQ>=mt_rand(1,10000)/10000){$this->writeFiles();}}}use Docx\Base\EnumType;class LogLevel extends EnumType{const __default=self::DEBUG;const EMERGENCY=1;const ALERT=2;const CRITICAL=3;const ERROR=4;const WARNING=5;const NOTICE=6;const INFO=7;const DEBUG=8;function getConstants(){return['EMERGENCY','ALERT','CRITICAL','ERROR','WARNING','NOTICE','INFO','DEBUG',];}}use Docx\Common;use Docx\Event\Sender;use Docx\Web\Request;class Logging extends Sender{protected$name='';protected$threshold=0;function __construct($A='default',$y='DEBUG'){$this->name=$A;$RC=new LogLevel($y);$this->threshold=$RC->getValue();}function allowLevel($y){$RC=new LogLevel($y);return$RC->getValue()<=$this->threshold;}static function getClientIP(){return Request::getClientIP();}static function format($J,array$N=[]){$V=is_null($J)?'':(string)$J;return Common::replaceWith($V,$N,'{','}');}function log($y,$J,array$N=[]){$y=strtoupper($y);if($this->allowLevel($y)){$V=self::format($J,$N);$f=['moment'=>time(),'ipaddr'=>self::getClientIP(),'level'=>$y,'name'=>$this->name,];$this->emit($V,$f);}}function emergency($J,array$N=[]){$this->log(__FUNCTION__,$J,$N);}function alert($J,array$N=[]){$this->log(__FUNCTION__,$J,$N);}function critical($J,array$N=[]){$this->log(__FUNCTION__,$J,$N);}function error($J,array$N=[]){$this->log(__FUNCTION__,$J,$N);}function warning($J,array$N=[]){$this->log(__FUNCTION__,$J,$N);}function notice($J,array$N=[]){$this->log(__FUNCTION__,$J,$N);}function info($J,array$N=[]){$this->log(__FUNCTION__,$J,$N);}function debug($J,array$N=[]){$this->log(__FUNCTION__,$J,$N);}}}
namespace Docx\Utility{use Docx\Common;use Docx\Utility\Word;use Docx\Utility\Markdoc;defined('DS')or define('DS',DIRECTORY_SEPARATOR);defined('CACHE_UNLINK_EMPTY_FREQ')or define('CACHE_UNLINK_EMPTY_FREQ',0.2);class FileSystem{protected$extname='';function __construct($OC=''){$this->extname=$OC;}static function removeEmptyDirs($S,$rC=CACHE_UNLINK_EMPTY_FREQ){if(!file_exists($S)||!is_dir($S)){return;}if($rC<1&&$rC<mt_rand(1,10000)/10000){return;}$UB=true;$l=glob($S.DS.'*');foreach($l as$k){if(is_dir($k)){$gD=self::removeEmptyDirs($k,1);$UB=$UB&&$gD;}else{$UB=false;}}if($UB){@rmdir($S);}return$UB;}static function removeAllFiles($H,array$WD=[]){if(!file_exists($H)){return;}if(is_file($H)){return@unlink($H);}$hB=true;$l=glob($H.DS.'*');foreach($l as$k){if(in_array($k,$WD,true)){$pB=false;}else if(is_dir($k)){$pB=self::removeAllFiles($k);}else{$pB=@unlink($k);}$hB=$hB&&$pB;}if($hB){@rmdir($H);}return$hB;}static function traverse(array&$l,$c,$U=''){$B=[];foreach($l as$eD=>$k){$Y=$U.'/'.$eD;if(isset($k['nodes'])){$cD=self::traverse($k['nodes'],$c,$Y);}$B[]=Common::execFunctionArray($c,[$k,$Y,$cD]);}return$B;}static function sortNames(array&$dB,$aB,$aD=false,$ZD=false){if($ZD){$xC='return $a["'.$aB.'"] - $b["'.$aB.'"];';}else{$xC='return strcasecmp($a["'.$aB.'"], $b["'.$aB.'"]);';}$YD=$aD?'$b, $a':'$a, $b';uasort($dB,create_function($YD,$xC));}static function slugifyName($K,$XD='_'){$i=explode($XD,$K,2);if(count($i)===2&&is_numeric($i[0])){$K=$i[1];}$g=Word::slugify($K);return array($g,$K);}static function adjustFile(array&$B,$NB){$q=false;$w=filemtime($NB);if(!isset($B['mtime'])||$B['mtime']!==$w){$q=true;$B['mtime']=$w;$B['sha1']=sha1_file($NB);$uD=new Markdoc($NB);if($FE=$uD->getMetaData('title')){$B['title']=$FE;}}return$q;}static function adjustDir(array&$B,$w){$q=false;if(!isset($B['mtime'])||$B['mtime']!==$w){$q=true;$B['mtime']=$w;$B['sha1']=sha1(json_encode($B['nodes']));}return$q;}function initNode(array&$l,$p,$EB,$iC=false){if($iC&&$this->extname){$K=basename($p,$this->extname);assert($K!==$p);}else{$K=$p;}list($g,$K)=self::slugifyName($K);$g=strtolower($g);if(!isset($l[$g])){$l[$g]=['path'=>$EB,'title'=>$K,'is_file'=>$iC?1:0,];}return$g;}function discover(array&$B,$z,$YB=''){if(!isset($B['nodes'])){$B['nodes']=[];}$hC=$YB?$z.DS.$YB:$z;$BC=filemtime($hC.DS.'.');$l=scandir($hC);foreach($l as$p){if(substr($p,0,1)==='.'){continue;}$EB=$YB?$YB.DS.$p:$p;$VC=$z.DS.$EB;if(is_file($VC)){$g=$this->initNode($B['nodes'],$p,$EB,true);self::adjustFile($B['nodes'][$g],$VC);$w=$B['nodes'][$g]['mtime'];if($w>$BC){$BC=$w;}}else{$g=$this->initNode($B['nodes'],$p,$EB,false);$this->discover($B['nodes'][$g],$z,$EB);}}$q=self::adjustDir($B,$BC);return$q;}function getOrganiz($S,$o=null){$z=realpath($S);if(!is_dir($z)){return;}$B=$o?$o->get('docs',[]):[];$q=$this->discover($B,$z);if($q){if(isset($B['nodes']['index'])){$B['nodes']['index']['is_file']=-1;}self::sortNames($B['nodes'],'is_file',false,true);if($o){$o->put('docs',$B);}}return$B;}}use Docx\Base\EnumType;class FileType extends EnumType{const __prefix='TYPE_';const __default=self::UNKNOWN;const TYPE_FIFO=1;const TYPE_CHAR=2;const TYPE_DIR=3;const TYPE_BLOCK=4;const TYPE_LINK=5;const TYPE_FILE=6;const TYPE_UNKNOWN=7;function getConstants(){return['TYPE_FIFO','TYPE_CHAR','TYPE_DIR','TYPE_BLOCK','TYPE_LINK','TYPE_FILE','TYPE_UNKNOWN',];}static function getFileType($K){$bC=new self();try{$P=filetype($K);if($P!==false){$bC->initByName(strtoupper($P));}}catch(\Exception$OB){}return$bC;}}class Inflect{protected static$plural=['/(quiz)$/i'=>'$1zes','/^(ox)$/i'=>'$1en','/([m|l])ouse$/i'=>'$1ice','/(matr|vert|ind)ix|ex$/i'=>'$1ices','/(x|ch|ss|sh)$/i'=>'$1es','/([^aeiouy]|qu)y$/i'=>'$1ies','/(hive)$/i'=>'$1s','/(?:([^f])fe|([lr])f)$/i'=>'$1$2ves','/(shea|lea|loa|thie)f$/i'=>'$1ves','/sis$/i'=>'ses','/([ti])um$/i'=>'$1a','/(tomat|potat|ech|her|vet)o$/i'=>'$1oes','/(bu)s$/i'=>'$1ses','/(alias)$/i'=>'$1es','/(octop)us$/i'=>'$1i','/(ax|test)is$/i'=>'$1es','/(us)$/i'=>'$1es','/s$/i'=>'s','/$/'=>'s',];protected static$singular=['/(quiz)zes$/i'=>'$1','/(matr)ices$/i'=>'$1ix','/(vert|ind)ices$/i'=>'$1ex','/^(ox)en$/i'=>'$1','/(alias)es$/i'=>'$1','/(octop|vir)i$/i'=>'$1us','/(cris|ax|test)es$/i'=>'$1is','/(shoe)s$/i'=>'$1','/(o)es$/i'=>'$1','/(bus)es$/i'=>'$1','/([m|l])ice$/i'=>'$1ouse','/(x|ch|ss|sh)es$/i'=>'$1','/(m)ovies$/i'=>'$1ovie','/(s)eries$/i'=>'$1eries','/([^aeiouy]|qu)ies$/i'=>'$1y','/([lr])ves$/i'=>'$1f','/(tive)s$/i'=>'$1','/(hive)s$/i'=>'$1','/(li|wi|kni)ves$/i'=>'$1fe','/(shea|loa|lea|thie)ves$/i'=>'$1f','/(^analy)ses$/i'=>'$1sis','/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/i'=>'$1$2sis','/([ti])a$/i'=>'$1um','/(n)ews$/i'=>'$1ews','/(h|bl)ouses$/i'=>'$1ouse','/(corpse)s$/i'=>'$1','/(us)es$/i'=>'$1','/s$/i'=>'',];protected static$irregular=['move'=>'moves','foot'=>'feet','goose'=>'geese','sex'=>'sexes','child'=>'children','man'=>'men','tooth'=>'teeth','person'=>'people',];protected static$uncountable=['sheep','fish','deer','series','species','money','rice','information','equipment',];protected static$abbreviations=['AD','API','B2B','B2C','C2C','CEO','CFO','COO','CTO','ORM','DSA','GEO','GPS','HTML','HTTP','ID','IO','IP','IQ','MD5','MTV','MV','MVC','NBA','OK','P2P','PC','PV','PDF','PHP','QQ','RMB','RSA','SOHO','SHA','SQL','TV','UI','URI','URL','USA','VIP','WC','WEB','WAP','WIFI','XML',];static function singularize($M){if(in_array(strtolower($M),self::$uncountable,true)){return$M;}foreach(self::$irregular as$B=>$W){$W='/'.$W.'$/i';if(preg_match($W,$M)){return preg_replace($W,$B,$M);}}foreach(self::$singular as$W=>$B){if(preg_match($W,$M)){return preg_replace($W,$B,$M);}}return$M;}static function pluralizeIf($eC,$M){if($eC==1){return"1 $M";}else{return$eC.' '.self::pluralize($M);}}static function pluralize($M){if(in_array(strtolower($M),self::$uncountable,true)){return$M;}foreach(self::$irregular as$W=>$B){$W='/'.$W.'$/i';if(preg_match($W,$M)){return preg_replace($W,$B,$M);}}foreach(self::$plural as$W=>$B){if(preg_match($W,$M)){return preg_replace($W,$B,$M);}}return$M;}static function camelize($M,$NE=false){$SB=explode('_',$M);if($NE){$dC=count($SB)-1;$SB[$dC]=self::pluralize($SB[$dC]);}foreach($SB as&$a){$a=ucfirst($a);if(strlen($a)>1&&strlen($a)<=4){$LB=strtoupper($a);if(in_array($LB,self::$abbreviations,true)){$a=$LB;}}}return implode('',$SB);}static function flatten($M,$KE='_'){$W='/([A-Z][A-Z0-9]*(?=$|[A-Z][a-z0-9])|[A-Za-z][a-z0-9]+)/';preg_match_all($W,$M,$DB);return strtolower(implode($KE,$DB[0]));}}$VB=\Docx\Importer::getInstance();$VB->addClass(VENDOR_DIR.'/Parsedown.php','Parsedown');class Markdoc{static$meta_keys=['layout','date','created','title','slug','author','category','tags','comments'];protected$filepath='';protected$metadata=[];protected$metatext='';protected$markdown='';protected$htmldoc='';protected$headsize=-1;function __construct($NB){$this->filepath=$NB;}static function parseMetaLine($L){$i=explode(':',$L);if(count($i)===2){$i[0]=strtolower(trim($i[0]));if(in_array($i[0],self::$meta_keys,true)){$i[1]=trim($i[1]);return$i;}}}function normalizeMetaData(array&$X){if(!isset($X['title'])){$X['title']=pathinfo($this->filepath,PATHINFO_FILENAME);}if(!isset($X['author'])){$X['author']='';}if(isset($X['tags'])&&is_string($X['tags'])){$X['tags']=array_map('trim',explode(',',$X['tags']));}if(!isset($X['date'])){$X['date']=filemtime($this->filepath);}else if(!is_numeric($X['date'])){$X['date']=strtotime($X['date']);}return$this->metadata=&$X;}function parseMetaData($HE=false){if(!is_readable($this->filepath)){$this->metadata=['title'=>'Oh No'];$this->htmldoc='<h3>抱歉，找不到页面~!</h3>';$this->headsize=0;return$this->metadata;}$this->metatext='';$X=[];$d=fopen($this->filepath,'rb');if($d===false){return false;}$L=fgets($d);$L=$L?trim($L):'';$L=preg_replace('{^\xEF\xBB\xBF|\x1A}','',$L);while(!$L||!trim($L));$nB=0;while($fB=strlen($L)){$this->metatext.=$L."\n";if($fB>=3&&$L===str_repeat('-',$fB)){if($nB<=0){$nB=$fB;}else if($nB===$fB){$L='';break;}}else if($gC=self::parseMetaLine($L)){$X[$gC[0]]=$gC[1];}else{break;}$L=fgets($d);$L=$L?trim($L):'';}if($HE){$this->markdown=$L.fread($d,filesize($this->filepath));$this->headsize=0;}else{$this->markdown=$L;$this->headsize=ftell($d);}fclose($d);$this->metatext=trim($this->metatext);return$this->normalizeMetaData($X);}function getMetaData($MC=false){if($this->headsize<0){$this->parseMetaData(false);}if($MC===false){return$this->metadata;}else if(isset($this->metadata[$MC])){return$this->metadata[$MC];}}function getPageData(){$this->getMetaData(false);if($this->headsize>0||!$this->markdown){$V=file_get_contents($this->filepath);$this->markdown=substr($V,$this->headsize);$this->headsize=0;}if(!$this->htmldoc&&$this->markdown){$this->htmldoc=\Parsedown::instance()->text($this->markdown);}$vD=['metatext'=>$this->metatext,'markdown'=>$this->markdown,'htmldoc'=>$this->htmldoc,];return array_merge($this->metadata,$vD);}function update($DE,$CE){$V=$DE."\n\n".$CE;file_put_contents($this->filepath,$V,LOCK_EX);$this->parseMetaData(true);return$this;}}use TQ\Git\Repository\Repository as GitRepository;use TQ\Git\Cli\Binary as GitBinary;$VB=\Docx\Importer::getInstance();$VB->import('TQ',VENDOR_DIR.'/PHP-Stream-Wrapper-for-Git-1.0.1/src');class Repository extends GitRepository{static function open($QC,$_=null,$BE=false,$FC=null,$AE=true){if(empty($_)){$_=GitBinary::locateBinary()?:'git';}return parent::open($QC,$_,$BE,$FC,$AE);}static function buildRemotePath($IB,$YC='',$_D=''){if(Common::startsWith($IB,'http')&&!empty($YC)){$ZC=$YC.':'.$_D.'@';$IB=str_replace('https://','https://'.$ZC,$IB);$IB=str_replace('http://','http://'.$ZC,$IB);}return$IB;}static function create($QC,$zD,$_=null,$FC=null){$WC=self::open($QC,$_,true,$FC,false);$WC->remote('add','origin',$zD);return$WC;}function commitMutely($yD,array$v=null,$xD=null,array$wD=[]){try{$this->commit($yD,$v,$xD,$wD);return true;}catch(\Exception$OB){return false;}}function __call($A,$C){$_=$this->getGit();$H=$this->getRepositoryPath();return$_->$A($H,$C);}}class Word{static$digits='0123456789';static$chars='〇一二三四五六七八九十百千万亿';static$caps='零壹贰叁肆伍陆柒捌玖拾佰仟萬億';protected$content='';function __construct($V=''){$this->content=$V;}static function slugify($A){return strtolower(str_replace(' ','-',$A));}static function num2char($hD,$LB=false){$VD=$LB?self::$caps:self::$chars;return self::mbStrtr(strval($hD),self::$digits,$VD);}static function mbStrtr($M,$_B,$tB){$_B=self::mbStrSplit($_B);$tB=self::mbStrSplit($tB);return str_replace($_B,$tB,$M);}static function mbStrSplit($M){$_C=self::hasNonASCII($M)?3:1;return str_split($M,$_C);}static function hasNonASCII($M){return preg_match('/[^\x20-\x7f]/',$M);}static function spell($gB,$LB=false){$BD=new\NumberFormatter('zh_CN',\NumberFormatter::SPELLOUT);$GC=$BD->format($gB);if($LB){$GC=self::mbStrtr($GC,self::$chars,self::$caps);}return$GC;}function b64decode($a){if(preg_match('!([A-Za-z0-9+/= ]+)!',$a,$DB)){$a=$DB[1];}return base64_decode($a);}static function randHash($u=6){$u=$u>32?32:$u;$GD=md5(mt_rand().time());$ID=substr($GD,0,$u);return$ID;}static function randString($u=6,$LD=2,$RB=''){if(empty($RB)){$RB='abcdefghijkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789';}srand((float)microtime()*1000000);$cC='';$eB=ceil($u/$LD);while($u>0){$RB=str_shuffle($RB);$cC.=substr($RB,0,$eB);$u-=$eB;$eB=min($u,$eB);}return$cC;}function fetchFirstURL(){if(preg_match('/^http[^\x23-\x76]/i',$this->content,$DB)){return$DB[1];}}function ver2int(){$SD=$this->getNumbers(false);$vB=array_map('intval',explode('.',$SD));$vB=array_pad($vB,3,0);return intval(vsprintf('%d%02d%02d',$vB));}function getNumbers($zC=true){$UC=preg_match_all('/[\d.]+/',$this->content,$DB);if($UC===0||$UC===false){return false;}$gB=implode(current($DB));return$zC?intval($gB):$gB;}}}
namespace Docx\Web{use Docx\Common;use Docx\Application;use Docx\Web\Response;class Handler{protected$app=null;protected$backend=null;protected$template='';protected$context=[];var$globals=['method'=>'get'];function __construct(Application&$ED,&$jB=null){$this->app=$ED;$this->backend=$jB;}function __toString(){$qB=$this->app->response;$qB->addFrameFile($this->template);$qB->addGlobals($this->globals);return$qB->render($this->context);}function __invoke(){$this->prepare();$TB=$this->globals['method'].'Action';$C=func_get_args();Common::execMethodArray($this,$TB,$C);$this->finish();return$this;}function prepare(){}function finish(){}function except($TC){return Response::abort(500);}}use Docx\Base\EnumType;class MimeType extends EnumType{const __prefix='EXT_';const __default=self::EXT_HTML;const EXT_HTML='text/html';const EXT_HTM='text/html';const EXT_SHTML='text/html';const EXT_CSS='text/css';const EXT_XML='text/xml';const EXT_GIF='image/gif';const EXT_JPEG='image/jpeg';const EXT_JPG='image/jpeg';const EXT_JS='application/javascript';const EXT_ATOM='application/atom+xml';const EXT_RSS='application/rss+xml';const EXT_MML='text/mathml';const EXT_TXT='text/plain';const EXT_JAD='text/vnd.sun.j2me.app-descriptor';const EXT_WML='text/vnd.wap.wml';const EXT_HTC='text/x-component';const EXT_PNG='image/png';const EXT_TIF='image/tiff';const EXT_TIFF='image/tiff';const EXT_WBMP='image/vnd.wap.wbmp';const EXT_ICO='image/x-icon';const EXT_JNG='image/x-jng';const EXT_BMP='image/x-ms-bmp';const EXT_SVG='image/svg+xml';const EXT_SVGZ='image/svg+xml';const EXT_WEBP='image/webp';const EXT_WOFF='application/font-woff';const EXT_JAR='application/java-archive';const EXT_WAR='application/java-archive';const EXT_EAR='application/java-archive';const EXT_JSON='application/json';const EXT_HQX='application/mac-binhex40';const EXT_DOC='application/msword';const EXT_PDF='application/pdf';const EXT_PS='application/postscript';const EXT_EPS='application/postscript';const EXT_AI='application/postscript';const EXT_RTF='application/rtf';const EXT_M3U8='application/vnd.apple.mpegurl';const EXT_XLS='application/vnd.ms-excel';const EXT_EOT='application/vnd.ms-fontobject';const EXT_PPT='application/vnd.ms-powerpoint';const EXT_WMLC='application/vnd.wap.wmlc';const EXT_KML='application/vnd.google-earth.kml+xml';const EXT_KMZ='application/vnd.google-earth.kmz';const EXT_7Z='application/x-7z-compressed';const EXT_CCO='application/x-cocoa';const EXT_JARDIFF='application/x-java-archive-diff';const EXT_JNLP='application/x-java-jnlp-file';const EXT_RUN='application/x-makeself';const EXT_PL='application/x-perl';const EXT_PM='application/x-perl';const EXT_PRC='application/x-pilot';const EXT_PDB='application/x-pilot';const EXT_RAR='application/x-rar-compressed';const EXT_RPM='application/x-redhat-package-manager';const EXT_SEA='application/x-sea';const EXT_SWF='application/x-shockwave-flash';const EXT_SIT='application/x-stuffit';const EXT_TCL='application/x-tcl';const EXT_TK='application/x-tcl';const EXT_DER='application/x-x509-ca-cert';const EXT_PEM='application/x-x509-ca-cert';const EXT_CRT='application/x-x509-ca-cert';const EXT_XPI='application/x-xpinstall';const EXT_XHTML='application/xhtml+xml';const EXT_XSPF='application/xspf+xml';const EXT_ZIP='application/zip';const EXT_BIN='application/octet-stream';const EXT_EXE='application/octet-stream';const EXT_DLL='application/octet-stream';const EXT_DEB='application/octet-stream';const EXT_DMG='application/octet-stream';const EXT_ISO='application/octet-stream';const EXT_IMG='application/octet-stream';const EXT_MSI='application/octet-stream';const EXT_MSP='application/octet-stream';const EXT_MSM='application/octet-stream';const EXT_DOCX='application/vnd.openxmlformats-officedocument.wordprocessingml.document';const EXT_XLSX='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';const EXT_PPTX='application/vnd.openxmlformats-officedocument.presentationml.presentation';const EXT_MID='audio/midi';const EXT_MIDI='audio/midi';const EXT_KAR='audio/midi';const EXT_MP3='audio/mpeg';const EXT_OGG='audio/ogg';const EXT_M4A='audio/x-m4a';const EXT_RA='audio/x-realaudio';const EXT_3GPP='video/3gpp';const EXT_3GP='video/3gpp';const EXT_TS='video/mp2t';const EXT_MP4='video/mp4';const EXT_MPEG='video/mpeg';const EXT_MPG='video/mpeg';const EXT_MOV='video/quicktime';const EXT_WEBM='video/webm';const EXT_FLV='video/x-flv';const EXT_M4V='video/x-m4v';const EXT_MNG='video/x-mng';const EXT_ASX='video/x-ms-asf';const EXT_ASF='video/x-ms-asf';const EXT_WMV='video/x-ms-wmv';const EXT_AVI='video/x-msvideo';function getConstants(){return['EXT_HTML','EXT_HTM','EXT_SHTML','EXT_CSS','EXT_XML','EXT_GIF','EXT_JPEG','EXT_JPG','EXT_JS','EXT_ATOM','EXT_RSS','EXT_MML','EXT_TXT','EXT_JAD','EXT_WML','EXT_HTC','EXT_PNG','EXT_TIF','EXT_TIFF','EXT_WBMP','EXT_ICO','EXT_JNG','EXT_BMP','EXT_SVG','EXT_SVGZ','EXT_WEBP','EXT_WOFF','EXT_JAR','EXT_WAR','EXT_EAR','EXT_JSON','EXT_HQX','EXT_DOC','EXT_PDF','EXT_PS','EXT_EPS','EXT_AI','EXT_RTF','EXT_M3U8','EXT_XLS','EXT_EOT','EXT_PPT','EXT_WMLC','EXT_KML','EXT_KMZ','EXT_7Z','EXT_CCO','EXT_JARDIFF','EXT_JNLP','EXT_RUN','EXT_PL','EXT_PM','EXT_PRC','EXT_PDB','EXT_RAR','EXT_RPM','EXT_SEA','EXT_SWF','EXT_SIT','EXT_TCL','EXT_TK','EXT_DER','EXT_PEM','EXT_CRT','EXT_XPI','EXT_XHTML','EXT_XSPF','EXT_ZIP','EXT_BIN','EXT_EXE','EXT_DLL','EXT_DEB','EXT_DMG','EXT_ISO','EXT_IMG','EXT_MSI','EXT_MSP','EXT_MSM','EXT_DOCX','EXT_XLSX','EXT_PPTX','EXT_MID','EXT_MIDI','EXT_KAR','EXT_MP3','EXT_OGG','EXT_M4A','EXT_RA','EXT_3GPP','EXT_3GP','EXT_TS','EXT_MP4','EXT_MPEG','EXT_MPG','EXT_MOV','EXT_WEBM','EXT_FLV','EXT_M4V','EXT_MNG','EXT_ASX','EXT_ASF','EXT_WMV','EXT_AVI',];}}@session_start();class Request{const PHP_INDEX_FILE='index.php';function __call($A,$MD){if(!Common::startsWith($A,'get')){return;}$A=strtolower(substr($A,3));@list($D,$Q,$rB)=$MD;switch($A){case'server':case'session':$B=self::getValue($A,$D,$Q);break;case'cookie':case'env':case'post':$B=self::getInput($A,$D,$Q);break;default:$I=self::detectInput($rB);if($I===INPUT_REQUEST||$I===INPUT_SESSION){$B=self::getValue($rB,$D,$Q,$A);}else{$B=self::getInput($rB,$D,$Q,$A);}break;}return$B;}protected static function detectInput($I='REQUEST'){$I=strtoupper($I?:'REQUEST');return constant('INPUT_'.$I);}protected static function detectType($b='string'){if(!is_array($b)){if($b==='raw'){return filter_id('unsafe_raw');}else{return filter_id($b?:'string');}}foreach($b as$D=>$P){if(is_array($P)){$b[$D]['filter']=self::detectType($P['filter']);}else{$b[$D]=self::detectType($P);}}return$b;}static function setValue($D,$E,$I='REQUEST'){$I=self::detectInput($I);switch($I){case INPUT_REQUEST:$_REQUEST[$D]=$E;break;case INPUT_COOKIE:$_COOKIE[$D]=$E;break;case INPUT_SESSION:$_SESSION[$D]=$E;break;case INPUT_ENV:$_ENV[$D]=$E;break;}}static function getValue($I,$D,$Q=null,$P='string'){$I=self::detectInput($I);if(is_null($I)){return;}if($I===INPUT_REQUEST){$I=$_REQUEST;}elseif($I===INPUT_SESSION){$I=$_SESSION;}elseif($I===INPUT_SERVER){$I=$_SERVER;}$P=self::detectType($P);if(is_array($P)||is_array($Q)){$NC=[$D=>['filter'=>$P,'flags'=>FILTER_FORCE_ARRAY]];$GB=filter_var_array($I,$NC,true);return isset($GB[$D])?$GB[$D]:$Q;}else{$E=isset($I[$D])?$I[$D]:$Q;return filter_var($E,$P);}}static function getInput($I,$D,$Q=null,$P='string'){$I=self::detectInput($I);if(is_null($I)){return;}$P=self::detectType($P);if(is_array($P)||is_array($Q)){$NC=[$D=>['filter'=>$P,'flags'=>FILTER_FORCE_ARRAY]];$E=filter_input_array($I,$NC,true);}else{$E=filter_input($I,$D,$P);}return is_null($E)?$Q:$E;}static function pop($D,$Q=null,$P='string'){$E=self::getValue('REQUEST',$D,$Q,$P);if(isset($_REQUEST[$D])){unset($_REQUEST[$D]);}return$E;}static function all($b='string',$I='REQUEST'){$I=self::detectInput($I);if(is_null($I)){return;}$b=self::detectType($b);if($I===INPUT_REQUEST){return filter_var_array($_REQUEST,$b);}elseif($I===INPUT_SESSION){return filter_var_array($_SESSION,$b);}elseif($I===INPUT_SERVER){return filter_var_array($_SERVER,$b);}else{return filter_input_array($I,$b,true);}}static function getPath($sC=null){if($sC){return self::pop($sC,'/');}$Y=self::getInput('SERVER','REQUEST_URI');$Y=parse_url($Y,PHP_URL_PATH);$A=self::getInput('SERVER','SCRIPT_NAME');if(empty($Y)||$Y===$A){return'';}$H=rtrim($Y,'/ ').'/';$vC=substr($A,0,-strlen(self::PHP_INDEX_FILE));if($H.self::PHP_INDEX_FILE===$A){$H='/';}else if(Common::startsWith($H,$A)){$H=substr($H,strlen($A));}else if(Common::startsWith($H,$vC)){$H=substr($H,strlen($vC)-1);}return$H;}static function getMethod(){$O=self::getInput('SERVER','REQUEST_METHOD','GET');return strtolower($O);}static function getClientIP(){$zB=['HTTP_CLIENT_IP','HTTP_X_REAL_IP','HTTP_X_FORWARDED_FOR','HTTP_X_FORWARDED','HTTP_X_CLUSTER_CLIENT_IP','HTTP_FORWARDED_FOR','HTTP_FORWARDED','REMOTE_ADDR',];foreach($zB as$D){$yB=self::getValue('SERVER',$D,'');if($yB&&strlen($yB)>=7){break;}}return$yB;}static function getArgv(){if(Common::isCLI()){return self::getValue('SERVER','argv',[],'string');}}}use Docx\Web\MimeType;class Response{protected$frame_files=[];protected$stack=[];var$blocks=[];var$globals=[];var$mime_type=null;var$charset='';function __construct($KD='',array$uB=[]){$this->addFrameFile($KD);$this->addGlobals($uB);}static function abort($mB=500){return http_response_code($mB);}static function header($A,$E,$ND=true,$mB=200){if(!headers_sent()){$L=empty($A)?'':strval($A).': ';$L.=is_array($E)?implode(' ',$E):strval($E);header($L,$ND,$mB);}}static function redirect($QD='',$RD=false){$TD=$RD?301:302;self::header('Location',$QD,true,$TD);return die();}function addGlobals(array$uB){$this->globals=array_merge($this->globals,$uB);return$this;}function addFrameFile($s){if($s&&is_readable($s)){$this->frame_files[]=$s;}return$this;}function extendTpl($oB){if($oB&&is_readable($oB)){array_unshift($this->frame_files,$oB);}return$this;}function includeTpl($s){if($s&&is_readable($s)){extract($this->globals);include$s;}}function blockStart($A='content'){array_push($this->stack,$A);ob_start();}function blockEnd(){$HD=trim(ob_get_clean());if($A=array_pop($this->stack)){$this->blocks[$A]=$HD;}}function block($A='content'){if(isset($this->blocks[$A])){return$this->blocks[$A];}}function setContentType($P,$yC='utf-8'){$this->mime_type=new MimeType($P);$this->charset=strval($yC);$L=$this->mime_type.'; charset='.$this->charset;self::header('Content-Type',$L);return$this;}function render(array$N=[]){extract($this->globals);extract($N);ob_start();while($s=array_pop($this->frame_files)){include$s;}return trim(ob_get_clean());}}class Router{static$aliases=['<int>'=>'([0-9\-]+)','<float>'=>'([0-9\.\-]+)','<num>'=>'([0-9\.\-,]*)','<string>'=>'([a-z0-9\-_]+)','<page>'=>'([0-9]*)/?([0-9]*)/?','<path>'=>'([a-z0-9\-_/]*)','<word>'=>'([^/]*)',];protected static$current=null;protected$filename='';protected$prefix='';protected$children=[];protected$items=[];protected function __construct($K='',$U='/'){$JD=['//','/','\\'];$this->filename=str_replace($JD,DIRECTORY_SEPARATOR,$K);$this->prefix=rtrim($U,'/');self::$current=$this;if($this->filename&&is_readable($this->filename)){include_once$this->filename;}}static function getCurrent(){return self::$current?:new self();}static function toPrefix($K){$OC=strstr(basename($K),'.');$PD=substr($K,0,-strlen($OC));$U=str_replace(DIRECTORY_SEPARATOR,'/',$PD);return strtolower(rtrim($U,'/'));}static function compileUrl($Y,$OD=false){$Y=preg_quote(strtolower(rtrim($Y,'/')));$zB=array_map('preg_quote',array_keys(self::$aliases));$GB=array_values(self::$aliases);$Y=str_replace($zB,$GB,$Y);$PC=($OD===false)?'':'(.*)?';return'!^'.$Y.'/?'.$PC.'$!';}function route($H,$R){$PB=self::compileUrl($H);if(func_num_args()>2){$bB=array_slice(func_get_args(),1);}else{$bB=[$R];}$this->items[$PB]=$bB;return$PB;}function expose($t,$PC='*.php'){$t=rtrim($t,DIRECTORY_SEPARATOR);$dB=glob($t.'/'.$PC,GLOB_BRACE);if(!empty($dB)){$FD=strlen($t);foreach($dB as$K){$U=self::toPrefix(substr($K,$FD));$this->children[$U]=$K;}}return$this;}function dispatch($H,$jC=false){$H=rtrim(strtolower($H),' /').'/';if(!$jC){krsort($this->children);}foreach($this->children as$U=>$K){if(Common::startsWith($H,$U)){$IC=new self($K,$U);$H=substr($H,strlen($U));return$IC->dispatch($H);}}if(!$jC){krsort($this->items);}foreach($this->items as$PB=>$bB){if(preg_match($PB,$H,$C)===1){$Y=$this->prefix.array_shift($C);return['handlers'=>$bB,'args'=>$C,'url'=>$Y,'rule'=>$PB,];}}return;}}use Docx\Cache\RedisCache;use \SessionHandlerInterface;class SessionHandler implements SessionHandlerInterface{const PREFIX='PHPSESSID:';protected static$instance=null;protected$cache=null;protected$timeout=0;function __construct(RedisCache&$o,$T=1800){$this->cache=$o;$this->timeout=intval($T);if(version_compare(PHP_VERSION,'6.0.0')<0){session_set_save_handler($this);}@session_start();}static function getInstance($T=1800){if(!self::$instance&&class_exists('\\Redis')){$o=new RedisCache(new\Redis(),'object');if($o->prepare('ping')){self::$instance=new self($o,$T);}}return self::$instance;}function getSessID($BB){return self::PREFIX.$BB;}function open($QE,$A){}function close(){}function read($BB){return$this->cache->read($this->getSessID($BB));}function write($BB,$AD){$this->cache->write($this->getSessID($BB),$AD);}function destroy($BB){return$this->cache->remove($this->getSessID($BB));}function gc($RE){}}}