<?php
namespace Docx{use Docx\Web\Router;use Docx\Web\URL;class Application{protected static$properties=['request'=>'\\Docx\\Web\\Request','response'=>'\\Docx\\Web\\Response',];protected$shortcuts=[];var$url=null;var$settings=[];function __construct(array$x=[]){if(version_compare(PHP_VERSION,'7.0.0')<0){Common::throwWarnings();}if(isset($x['timezone'])){date_default_timezone_set($x['timezone']);}if(Common::isCLI()){set_time_limit(0);ini_set('display_errors',1);if(isset($x['memory_limit'])){ini_set('memory_limit',$x['memory_limit']);}}$KB=\Docx\Importer::getInstance();$this->installRef($KB,['import','introduce','addClass']);$DD=Router::getCurrent();$this->installRef($DD,['dispatch','expose']);$this->settings=$x;}function __get($A){if(array_key_exists($A,self::$properties)){$H=self::$properties[$A];$this->$A=Common::execConstructArray($H);}return$this->$A;}function __call($A,$B){$A=strtolower($A);if(isset($this->shortcuts[$A])){$kC=$this->shortcuts[$A];if(is_array($kC)){@list($h,$A)=$kC;}else{$h=&$this->shortcuts[$A];}return Common::execMethodArray($h,$A,$B);}}static function setLanguage($ED,$hC='zh_CN',$gC='messages'){putenv('LANG='.$hC);setlocale(LC_ALL,$hC);if(function_exists('bindtextdomain')){bindtextdomain($gC,$ED);textdomain($gC);}}function install($h,array$gB){foreach($gB as$QB=>$L){$QB=strtolower(is_numeric($QB)?$L:$QB);$this->shortcuts[$QB]=[$h,$L];}return$this;}function installRef(&$h,array$gB){foreach($gB as$L){$this->shortcuts[strtolower($L)]=&$h;}return$this;}function route($F,$b){$kB=Router::getCurrent();$B=func_get_args();return Common::execMethodArray($kB,'route',$B);}function execute($F,$L){$yB=$this->dispatch($F);if(!$yB){return die();}$RB=null;foreach($yB['handlers']as$b){if(empty($b)){continue;}if(is_string($b)&&class_exists($b,true)){$b=new$b($this,$RB,$L);}$RB=$b;}$MC='';if(is_callable($b)){try{$MC=Common::execFunctionArray($b,$yB['args']);}catch(\Exception$fC){if(method_exists($b,'except')){$MC=$b->except($fC);}}}return die(strval($MC));}function run(){if(Common::isCLI()){$LD=$this->request->getArgv();$F='/'.implode('/',array_slice($LD,1));$L='cmd';}else{$HC=isset($x['route_key'])?$x['route_key']:'';$this->url=new URL($HC);$F=$this->url->getPath();$L=$this->request->getMethod();if($L==='post'){$L=$this->request->getString('_method','post');}}return$this->execute($F,$L);}}final class Common{static function isCLI(){return strtolower(php_sapi_name())==='cli';}static function isWinNT(){return strtolower(substr(PHP_OS,0,3))==='win';}static function throwWarnings(){set_error_handler(function($MD,$QD,$JD,$uC,array$FE=[]){if(0===error_reporting()){return false;}throw new\ErrorException($QD,0,$MD,$JD,$uC);},E_WARNING|E_CORE_WARNING|E_COMPILE_WARNING);}static function startsWith($WB,$MB){return strncmp($WB,$MB,strlen($MB))===0;}static function endsWith($WB,$MB){$NC=strlen($MB);return$NC===0||(strlen($WB)>=$NC&&substr_compare($WB,$MB,-$NC)===0);}static function replaceWith($P,array$M=[],$X='',$aC=''){if(empty($M)){return$P;}if(empty($X)&&empty($aC)){$zB=&$M;}else{$zB=[];foreach($M as$E=>&$I){$zB[$X.$E.$aC]=$I;}}$P=strtr($P,$zB);return$P;}static function convertString($s,$EB='UTF-8'){$EB=strtoupper($EB);if(function_exists('mb_detect_encoding')){return mb_detect_encoding($s,$EB,true)?$s:mb_convert_encoding($s,$EB,'UTF-8, GBK');}elseif(function_exists('iconv')){$pC=$EB==='UTF-8'?'GBK':'UTF-8';return iconv($pC,$EB.'//IGNORE',$s);}}static function execFunctionArray($V,array$B=[]){switch(count($B)){case 0:return$V();case 1:return$V($B[0]);case 2:return$V($B[0],$B[1]);case 3:return$V($B[0],$B[1],$B[2]);case 4:return$V($B[0],$B[1],$B[2],$B[3]);case 5:return$V($B[0],$B[1],$B[2],$B[3],$B[4]);default:if(is_object($V)){$a=new\ReflectionMethod($V,'__invoke');return$a->invokeArgs($V,$B);}elseif(is_callable($V)){$a=new\ReflectionFunction($V);return$a->invokeArgs($B);}}}static function execMethodArray($j,$L,array$B=[]){if(is_object($j)){switch(count($B)){case 0:return$j->{$L}();case 1:return$j->{$L}($B[0]);case 2:return$j->{$L}($B[0],$B[1]);case 3:return$j->{$L}($B[0],$B[1],$B[2]);case 4:return$j->{$L}($B[0],$B[1],$B[2],$B[3]);case 5:return$j->{$L}($B[0],$B[1],$B[2],$B[3],$B[4]);}}if(method_exists($j,$L)){$a=new\ReflectionMethod($j,$L);if($a->isPublic()&&!$a->isAbstract()){if($a->isStatic()){return$a->invokeArgs(null,$B);}else{return$a->invokeArgs($j,$B);}}}}static function execConstructArray($H,array$B=[]){if(method_exists($H,'getInstance')){$a=new\ReflectionMethod($H,'getInstance');return$a->invokeArgs(null,$B);}switch(count($B)){case 0:return new$H();case 1:return new$H($B[0]);case 2:return new$H($B[0],$B[1]);case 3:return new$H($B[0],$B[1],$B[2]);case 4:return new$H($B[0],$B[1],$B[2],$B[3]);case 5:return new$H($B[0],$B[1],$B[2],$B[3],$B[4]);default:if(class_exists($H)){$a=new\ReflectionClass($H);return$a->newInstanceArgs($B);}}}}final class Importer{private static$instance=null;private$classes=[];private$prefixes=[];private$sepeators='';private$sepeator_array=[];private function __construct($mC='\\'){$this->sepeators=$mC;$this->sepeator_array=str_split($mC);$this->prefixes[__NAMESPACE__]=__DIR__;}static function getInstance(){if(is_null(self::$instance)){self::$instance=new self();self::$instance->register();}return self::$instance;}static function exists($H,$AC=true){return class_exists($H,$AC)||interface_exists($H,$AC)||trait_exists($H,$AC);}static function requireFile($u,$oC=false){if(empty($u)||!file_exists($u)){return false;}if($oC){require_once$u;}else{require$u;}return true;}function register(){return spl_autoload_register(array($this,'autoload'));}function autoload($H){$H=trim($H,$this->sepeators);if(isset($this->classes[$H])){if(self::requireFile($this->classes[$H])){return self::exists($H,false);}}$qC=$this->matchPrefix($H);return$qC===true;}function matchPrefix($H){$OB='';foreach($this->prefixes as$e=>$F){if(substr($H,0,strlen($e))===$e){if(empty($e)){$OB=$H;}else{$OB=substr($H,strlen($e)+1);}$CC=strtok($OB,$this->sepeators);break;}}if(empty($OB)){return false;}$bC=$F.DIRECTORY_SEPARATOR;$bC.=str_replace($this->sepeator_array,DIRECTORY_SEPARATOR,$OB);if(self::requireFile($bC.'.php')){if(self::exists($H,false)){return true;}}while($CC){$F.=DIRECTORY_SEPARATOR.$CC;if(self::requireFile($F.'.php')){if(self::exists($H,false)){return true;}}if(!file_exists($F)){return false;}$CC=strtok($this->sepeators);}}function addClass($G,$H){$cC=func_get_args();$G=array_shift($cC);if(is_readable($G)){foreach($cC as$H){$this->classes[trim($H,'\\')]=$G;}}krsort($this->classes);return$this;}function introduce($e,$Z){$e=trim($e,'\\');$Z=rtrim($Z,'\\/');$this->prefixes[$e]=$Z;krsort($this->prefixes);return$this;}function import($e,$Z){$vC=str_replace($this->sepeator_array,DIRECTORY_SEPARATOR,$e);$Z.=DIRECTORY_SEPARATOR.$vC;return$this->introduce($e,$Z);}}}
namespace Docx\Base{use Docx\Common;abstract class EnumType{const __prefix='';const __default=null;protected$name='__default';protected$value=null;function __construct($vB='__default'){$I=null;if($vB&&$vB!=='__default'){$A=static::__prefix.strtoupper($vB);$I=@constant(get_class($this).'::'.$A);}if(is_null($I)){$this->value=static::__default;}else{$this->name=$A;$this->value=$I;}}function __toString(){return strval($this->getValue());}function getValue(){return$this->value;}function getName($xC=false){if($xC||'__default'===$this->name){return$this->name;}else{return substr($this->name,static::__prefix);}}function isDefault(){return$this->getValue()===static::__default;}abstract function getConstants();}class Factory{protected$storage=null;protected$objects=[];function __construct(Storage&$RD){$this->storage=$RD;}static function normalize($H){return rtrim($H,'\\');}function create($A,$E='default'){$xB=$this->storage->getSectionOnce($A);$H=self::normalize($xB->getItem('class'));$C=$xB->getArray($E);if($E!=='default'){$C=array_merge($xB->getArray('default'),$C);}if(class_exists($H)){foreach($C as$jC=>&$I){if(starts_with($jC,'@')){$I=$this->load(trim($jC,'@'),$I);}}return exec_construct_array($H,array_values($C));}}function load($A,$E='default'){if(!isset($this->objects[$A])){$this->objects[$A]=[];if(!isset($this->objects[$A][$E])){$this->objects[$A][$E]=$this->create($A,$E);}}return$this->objects[$A][$E];}}use ArrayAccess;use Countable;class Storage implements Countable,ArrayAccess{protected$data=[];protected$insensitive=false;function __construct($C=null,$TD=false){$this->insensitive=$TD;$this->update($C);}function update($C){if($C instanceof self){$C=$C->data;}else{$C=empty($C)?[]:(array)$C;}if($this->insensitive){$C=array_change_key_case($C);}$this->data=array_merge($this->data,$C);}function count(){return count($this->data);}function offsetExists($S){if($this->insensitive){$S=strtolower($S);}return array_key_exists($S,$this->data);}function offsetGet($S){if($this->insensitive){$S=strtolower($S);}return$this->data[$S];}function offsetSet($S,$I){if($this->insensitive){$S=strtolower($S);}$this->data[$S]=$I;}function offsetUnset($S){if($this->insensitive){$S=strtolower($S);}unset($this->data[$S]);}function getItem($A,$Q=null){$iC=@$this->offsetGet($A);return is_null($iC)?$Q:$iC;}function getArray($A,array$Q=[]){$C=$this->getItem($A);return is_array($C)?$C:$Q;}function getSection($A){$C=$this->getArray($A,[]);return new self($C);}function getSectionOnce($A){$C=$this->getItem($A);if(!($C instanceof self)){$C=new self($C);$this->offsetSet($A,$C);}return$C;}}}
namespace Docx\Event{class EventIgnore extends\Exception{}class EventInterrupt extends\Exception{}use SplSubject;use SplObserver;use Docx\Common;class Listener implements SplObserver{protected$slots=[];function addPlugin($L,&$h){$this->slots[strtolower($L)]=$h;return$this;}function update(SplSubject$t){$A=strtolower($t->name);$B=$t->args;if(isset($this->slots[$A])){$h=$this->slots[$A];}else{$h=$this;}return Common::execMethodArray($h,$A,$B);}}trait Sender{protected$signals=[];function getSignal($A,$rD=false){if(isset($this->signals[$A])){return$this->signals[$A];}else if($rD){$this->signals[$A]=new Signal($A,$this);return$this->signals[$A];}}function addEvent($A,$y){$t=$this->getSignal($A,true);$t->attach($y);return$this;}function emit($A){$t=$this->getSignal($A,false);if($t){$t->args=array_slice(func_get_args(),1);return$t->notify();}}}class Signal implements SplSubject{const FIRST_SUCCESS=1;const ONE_BY_ONE=2;protected$listeners=[];var$sender=null;var$mode=0;var$name='';var$args=[];function __construct($A,&$sD){$this->name=$A;$this->sender=$sD;$this->setMode(self::ONE_BY_ONE);}function setMode($uD){$this->mode=$uD;}function attach(SplObserver$y){$this->listeners[]=$y;}function detach(SplObserver$y){$E=array_search($y,$this->listeners,true);if($E!==false){$this->detachKey($E);}}function detachKey($E){unset($this->listeners[$E]);}function notify(){$D=null;foreach($this->listeners as&$y){try{$D=$y->update($this);if($this->mode===self::FIRST_SUCCESS&&!is_null($D)){break;}}catch(EventInterrupt$EC){break;}catch(EventIgnore$EC){continue;}}return$D;}}}
namespace Docx\Cache{use Docx\Event\Signal;class Agent{use\Docx\Event\Sender;const OP_READ='read';const OP_WRITE='write';const OP_REMOVE='remove';protected$timeout=-1;protected$data=null;function __construct($Y=0){$this->setTimeout($Y);}function initSignals(&$r){$this->addEvent(self::OP_READ,$r);$this->getSignal(self::OP_READ)->setMode(Signal::FIRST_SUCCESS);$this->addEvent(self::OP_WRITE,$r);$this->addEvent(self::OP_REMOVE,$r);}function setTimeout($Y){$Y=intval($Y);if($Y>0){$this->timeout=$Y;}else{$this->timeout=-1;}return$this;}function connect(&$C){$this->data=&$C;return$this;}function get($Q=null){$this->data=$this->emit(self::OP_READ);return is_null($this->data)?$Q:$this->data;}function put($C=null){$C=is_null($C)?$this->data:$C;$this->emit(self::OP_WRITE,$C,$this->timeout);return$C;}function remove(){$this->data=null;return$this->emit(self::OP_REMOVE);}}use Docx\Event\Listener;abstract class BaseCache extends Listener{protected$agent=null;function getAgent($Y=0){if(!$this->agent){$this->agent=new Agent($Y);$this->agent->initSignals($this);}return$this->agent;}function prepare(){}abstract function read();abstract function write($I,$Y=0);abstract function remove();}class CsvCache extends BaseCache{protected$filename='';protected$extname='';protected$delimiter='';protected$at_least=0;function __construct($G,$oD="\t",$wD=0){$this->filename=$G;$this->delimiter=$oD?:"\t";$this->at_least=intval($wD);}static function detectFile($G){$dC=pathinfo($G);@mkdir($dC['dirname'],0755,true);if(!is_readable($G)){touch($G);}$z='.'.strtolower($dC['extension']);return$z;}function prepare(){if(empty($this->extname)){$this->extname=self::detectFile($this->filename);}}function read(){$this->prepare();$i=filesize($this->filename);if($i===false||$i===0){return;}$C=[];$W=fopen($this->filename,'rb');if($W!==false){do{$K=fgetcsv($W,0,$this->delimiter);if(is_null($K)||$K===false){break;}if(is_null($K[0])){$K=[];}elseif($this->at_least>0){if(count($K)<$this->at_least){continue;}}$C[]=$K;}while(1);fclose($W);}return$C;}function write($I,$Y=0){$this->prepare();$W=fopen($this->filename,'wb');if($W===false||!is_array($I)){return false;}foreach($I as$TB){fputcsv($W,$TB,$this->delimiter);}fclose($W);return true;}function remove(){$this->prepare();if(file_exists($this->filename)){return unlink($this->filename);}}}class FileCache extends BaseCache{protected$filename='';protected$extname='';function __construct($G='',$z=''){$this->filename=$G;$this->extname=$z;}static function dumpYaml($C){if(extension_loaded('yaml')){return yaml_emit($C,YAML_UTF8_ENCODING,YAML_LN_BREAK);}else if(class_exists('\\Symfony\\Component\\Yaml\\Yaml')){return\Symfony\Component\Yaml\Yaml::dump($C);}}static function parseYaml($C){if(extension_loaded('yaml')){return yaml_parse($C);}else if(class_exists('\\Symfony\\Component\\Yaml\\Yaml')){return\Symfony\Component\Yaml\Yaml::parse($C);}}function prepare(){if(empty($this->filename)){$this->filename=tempnam(sys_get_temp_dir(),'cache_');}else if(empty($this->extname)){$this->extname=CsvCache::detectFile($this->filename);}}function read(){$this->prepare();$i=filesize($this->filename);if($i===false||$i===0){return;}if($this->extname==='.php'){return include$this->filename;}else{$AB=file_get_contents($this->filename);return$this->decode($AB);}}function write($I,$Y=0){$this->prepare();$C=$this->encode($I);$i=file_put_contents($this->filename,$C,LOCK_EX);return$i&&$i>0;}function remove(){$this->prepare();if(file_exists($this->filename)){return unlink($this->filename);}}protected function decode($AB){switch($this->extname){case'':case'.txt':case'.htm':case'.html':$D=$AB;break;case'.json':$D=json_decode($AB,true);break;case'.yml':case'.yaml':$D=self::parseYaml($AB);break;}return$D;}protected function encode($C){switch($this->extname){case'':case'.txt':case'.htm':case'.html':$D=$C;break;case'.php':$AB=var_export($C,true);$D="<?php \nreturn ".$AB.";\n";break;case'.json':$D=json_encode($C);break;case'.yml':case'.yaml':$D=self::dumpYaml($C);break;}return$D;}}use Docx\Common;class RedisCache extends BaseCache{const SHAPE_INT='int';const SHAPE_FLOAT='float';const SHAPE_STRING='string';const SHAPE_ARRAY='array';const SHAPE_OBJECT='object';const SHAPE_DATETIME='datetime';protected$redis=null;var$name='';var$shape='';function __construct(&$zD,$A,$DE='string'){$this->redis=$zD;$this->name=$A;$this->shape=$DE;}function getRedis(){return$this->redis;}function prepare(){try{$this->redis->ping();return true;}catch(\Exception$EC){return false;}}function read(){$this->prepare();if($this->shape===self::SHAPE_OBJECT){$C=$this->redis->hGetAll($this->name);}elseif($this->shape===self::SHAPE_ARRAY){$C=$this->redis->lRange($this->name,0,-1);}else{$C=$this->redis->get($this->name);}return$C;}function write($I,$Y=0){$this->prepare();if($this->shape===self::SHAPE_OBJECT){foreach($I as$E=>$LC){$this->redis->hSet($this->name,$E,$LC);}}elseif($this->shape===self::SHAPE_ARRAY){foreach($I as$LC){$this->redis->lPush($this->name,$LC);}}else{$this->redis->set($this->name,$I);}if($Y>0){$this->redis->expire($this->name,$Y);}return true;}function remove(){$this->prepare();$mD=$this->redis->del($this->name);return$mD>0;}function incre($n=1){$this->prepare();$n=abs($n);if($n===1){return$this->redis->incre($this->name);}else{return$this->redis->increBy($this->name,$n);}}function decre($n=1){$this->prepare();$n=abs($n);if($n===1){return$this->redis->decre($this->name);}else{return$this->redis->decreBy($this->name,$n);}}}}
namespace Docx\Log{use Docx\Event\Listener;abstract class BaseLogger extends Listener{protected$logging=null;function getLogging($A='access',$c='DEBUG'){if(!$this->logging){$this->logging=new Logging($A,$c);$this->logging->addEvent('append',$this);}return$this->logging;}abstract function append($A,$P,array$T);}use PDO;class DBLogger extends BaseLogger{const ZONE_INTERVAL=28800;protected$pdo=null;protected$last_hour=0;function __construct(PDO$lD){$this->pdo=$lD;}function __destruct(){unset($this->pdo);}function getTable($aB){$HB='t_log_'.date('Ymd',$aB);if($aB-$this->last_hour>=self::ZONE_INTERVAL){$this->last_hour=$aB-$aB%self::ZONE_INTERVAL;$nB='CREATE TABLE IF NOT EXISTS %s LIKE %s';$mB=sprintf($nB,$HB,'t_log');$this->pdo->exec($mB);}return$HB;}function insertRow($HB,array&$TB){$VD=implode(',',array_keys($TB));$FB=implode("','",array_values($TB));$nB="INSERT INTO %s(%s) VALUES('%s')";$mB=sprintf($nB,$HB,$VD,$FB);$this->pdo->exec($mB);}function append($A,$P,array$T){$HB=$this->getTable($T['moment']);$T['moment']=date('Y-m-d H:i:s',$T['moment']);$T['name']=$A;$T['content']=$P;$this->insertRow($HB,$T);}}defined('LOG_WRITE_FILE_FREQ')or define('LOG_WRITE_FILE_FREQ',1);class FileLogger extends BaseLogger{protected$filepath='';protected$records=[];function __construct($m=false){if($m===false){$m=realpath('./logs');}@mkdir($m,0777,true);$this->filepath=$m.DIRECTORY_SEPARATOR.'%s.log';}function __destruct(){$this->writeFiles();unset($this->records);}function writeFiles(){foreach($this->records as$G=>&$nC){$u=sprintf($this->filepath,$G);$YD=implode('',$nC);$i=file_put_contents($u,$YD,FILE_APPEND|LOCK_EX);if($i!==false){$nC=[];}}}function append($A,$P,array$T){$G=$A.'_'.date('Ymd',$T['moment']);$T['moment']=date('Y-m-d H:i:s',$T['moment']);$ZD=implode("\t",$T)."\t".$P;if(!isset($this->records[$G])){$this->records[$G]=[];}array_push($this->records[$G],$ZD.PHP_EOL);if(LOG_WRITE_FILE_FREQ>=1||LOG_WRITE_FILE_FREQ>=mt_rand(1,10000)/10000){$this->writeFiles();}}}use Docx\Base\EnumType;class LogLevel extends EnumType{const __default=self::DEBUG;const EMERGENCY=1;const ALERT=2;const CRITICAL=3;const ERROR=4;const WARNING=5;const NOTICE=6;const INFO=7;const DEBUG=8;function getConstants(){return['EMERGENCY','ALERT','CRITICAL','ERROR','WARNING','NOTICE','INFO','DEBUG',];}}use Docx\Common;use Docx\Web\Request;class Logging{use\Docx\Event\Sender;protected$name='';protected$threshold=0;function __construct($A='access',$c='DEBUG'){$this->name=$A;$this->setLevel($c);}function setLevel($c){$dB=new LogLevel($c);$this->threshold=$dB->getValue();return$this;}function allowLevel($c){$dB=new LogLevel($c);return$dB->getValue()<=$this->threshold;}static function getClientIP(){return Request::getClientIP();}static function format($N,array$M=[]){$P=is_null($N)?'':(string)$N;return Common::replaceWith($P,$M,'{','}');}function log($c,$N,array$M=[]){$c=strtoupper($c);if($this->allowLevel($c)){$P=self::format($N,$M);$T=['moment'=>time(),'ipaddr'=>self::getClientIP(),'level'=>$c,];$this->emit('append',$this->name,$P,$T);}}function emergency($N,array$M=[]){$this->log(__FUNCTION__,$N,$M);}function alert($N,array$M=[]){$this->log(__FUNCTION__,$N,$M);}function critical($N,array$M=[]){$this->log(__FUNCTION__,$N,$M);}function error($N,array$M=[]){$this->log(__FUNCTION__,$N,$M);}function warning($N,array$M=[]){$this->log(__FUNCTION__,$N,$M);}function notice($N,array$M=[]){$this->log(__FUNCTION__,$N,$M);}function info($N,array$M=[]){$this->log(__FUNCTION__,$N,$M);}function debug($N,array$M=[]){$this->log(__FUNCTION__,$N,$M);}}}
namespace Docx\Utility{use Docx\Common;defined('DS')or define('DS',DIRECTORY_SEPARATOR);defined('CACHE_UNLINK_EMPTY_FREQ')or define('CACHE_UNLINK_EMPTY_FREQ',0.2);class FileSystem{protected$extname='';function __construct($z=''){$this->extname=$z;}static function removeEmptyDirs($Z,$eC=CACHE_UNLINK_EMPTY_FREQ){if(!file_exists($Z)||!is_dir($Z)){return;}if($eC<1&&$eC<mt_rand(1,10000)/10000){return;}$IB=true;$k=glob($Z.DS.'*');foreach($k as$f){if(is_dir($f)){$EE=self::removeEmptyDirs($f,1);$IB=$IB&&$EE;}else{$IB=false;}}if($IB){@rmdir($Z);}return$IB;}static function removeAllFiles($F,array$cD=[]){if(!file_exists($F)){return;}if(is_file($F)){return@unlink($F);}$VB=true;$k=glob($F.DS.'*');foreach($k as$f){if(in_array($f,$cD,true)){$lB=false;}else if(is_dir($f)){$lB=self::removeAllFiles($f);}else{$lB=@unlink($f);}$VB=$VB&&$lB;}if($VB){@rmdir($F);}return$VB;}static function traverse(array&$k,$V,$X=''){$D=[];foreach($k as$eD=>$f){$w=$X.'/'.$eD;if(isset($f['nodes'])){$fD=self::traverse($f['nodes'],$V,$w);}$D[]=Common::execFunctionArray($V,[$f,$w,$fD]);}return$D;}static function sortNames(array&$bB,$cB,$hD=false,$iD=false){if($iD){$lC='return $a["'.$cB.'"] - $b["'.$cB.'"];';}else{$lC='return strcasecmp($a["'.$cB.'"], $b["'.$cB.'"]);';}$jD=$hD?'$b, $a':'$a, $b';uasort($bB,create_function($jD,$lC));}static function slugifyName($G,$kD='_'){$g=explode($kD,$G,2);if(count($g)===2&&is_numeric($g[0])){$G=$g[1];}$d=Word::slugify($G);return array($d,$G);}static function adjustFile(array&$D,$NB){$o=false;$v=filemtime($NB);if(!isset($D['mtime'])||$D['mtime']!==$v){$o=true;$D['mtime']=$v;$D['sha1']=sha1_file($NB);$nD=new Markdoc($NB);if($rC=$nD->getMetaData('title')){$D['title']=$rC;}}return$o;}static function adjustDir(array&$D,$v){$o=false;if(!isset($D['mtime'])||$D['mtime']!==$v){$o=true;$D['mtime']=$v;$D['sha1']=sha1(json_encode($D['nodes']));}return$o;}function initNode(array&$k,$p,$CB,$PC=false){if($PC&&$this->extname){$G=basename($p,$this->extname);assert($G!==$p);}else{$G=$p;}list($d,$G)=self::slugifyName($G);$d=strtolower($d);if(!isset($k[$d])){$k[$d]=['path'=>$CB,'title'=>$G,'is_file'=>$PC?1:0,];}return$d;}function discover(array&$D,$BB,$SB=''){if(!isset($D['nodes'])){$D['nodes']=[];}$SC=$SB?$BB.DS.$SB:$BB;$fB=filemtime($SC.DS.'.');$k=scandir($SC);foreach($k as$p){if(substr($p,0,1)==='.'){continue;}$CB=$SB?$SB.DS.$p:$p;$TC=$BB.DS.$CB;if(is_file($TC)){$d=$this->initNode($D['nodes'],$p,$CB,true);self::adjustFile($D['nodes'][$d],$TC);$v=$D['nodes'][$d]['mtime'];if($v>$fB){$fB=$v;}}else{$d=$this->initNode($D['nodes'],$p,$CB,false);$this->discover($D['nodes'][$d],$BB,$CB);}}$o=self::adjustDir($D,$fB);return$o;}function getOrganiz($Z,$r=null){$BB=realpath($Z);if(!is_dir($BB)){return;}$D=[];if($r){$r->connect($D);}$o=$this->discover($D,$BB);if($o){if(isset($D['nodes']['index'])){$D['nodes']['index']['is_file']=-1;}self::sortNames($D['nodes'],'is_file',false,true);if($r){$r->put($D);}}return$D;}}use Docx\Base\EnumType;class FileType extends EnumType{const __prefix='TYPE_';const __default=self::UNKNOWN;const TYPE_FIFO=1;const TYPE_CHAR=2;const TYPE_DIR=3;const TYPE_BLOCK=4;const TYPE_LINK=5;const TYPE_FILE=6;const TYPE_UNKNOWN=7;function getConstants(){return['TYPE_FIFO','TYPE_CHAR','TYPE_DIR','TYPE_BLOCK','TYPE_LINK','TYPE_FILE','TYPE_UNKNOWN',];}static function getFileType($G){return new self(filetype($G));}}$KB=\Docx\Importer::getInstance();$KB->addClass(VENDOR_DIR.'/Parsedown.php','Parsedown');class Markdoc{static$meta_keys=['layout','date','created','title','slug','author','category','tags','comments'];protected$filepath='';protected$metadata=[];protected$metatext='';protected$markdown='';protected$htmldoc='';protected$headsize=-1;function __construct($NB){$this->filepath=$NB;}static function parseMetaLine($K){$g=explode(':',$K);if(count($g)===2){$g[0]=strtolower(trim($g[0]));if(in_array($g[0],self::$meta_keys,true)){$g[1]=trim($g[1]);return$g;}}}function normalizeMetaData(array&$R){if(!isset($R['title'])){$R['title']=pathinfo($this->filepath,PATHINFO_FILENAME);}if(!isset($R['author'])){$R['author']='';}if(isset($R['tags'])&&is_string($R['tags'])){$R['tags']=array_map('trim',explode(',',$R['tags']));}if(!isset($R['date'])){$R['date']=filemtime($this->filepath);}else if(!is_numeric($R['date'])){$R['date']=strtotime($R['date']);}return$this->metadata=&$R;}function parseMetaData($gD=false){if(!is_readable($this->filepath)){$this->metadata=['title'=>'Oh No'];$this->htmldoc='<h3>抱歉，找不到页面~!</h3>';$this->headsize=0;return$this->metadata;}$this->metatext='';$R=[];$W=fopen($this->filepath,'rb');if($W===false){return false;}$K=fgets($W);$K=$K?trim($K):'';$K=preg_replace('{^\xEF\xBB\xBF|\x1A}','',$K);while(!$K||!trim($K));$oB=0;while($YB=strlen($K)){$this->metatext.=$K."\n";if($YB>=3&&$K===str_repeat('-',$YB)){if($oB<=0){$oB=$YB;}else if($oB===$YB){$K='';break;}}else if($WC=self::parseMetaLine($K)){$R[$WC[0]]=$WC[1];}else{break;}$K=fgets($W);$K=$K?trim($K):'';}if($gD){$this->markdown=$K.fread($W,filesize($this->filepath));$this->headsize=0;}else{$this->markdown=$K;$this->headsize=ftell($W);}fclose($W);$this->metatext=trim($this->metatext);return$this->normalizeMetaData($R);}function getMetaData($hB=false){if($this->headsize<0){$this->parseMetaData(false);}if($hB===false){return$this->metadata;}else if(isset($this->metadata[$hB])){return$this->metadata[$hB];}}function getPageData(){$this->getMetaData(false);if($this->headsize>0||!$this->markdown){$P=file_get_contents($this->filepath);$this->markdown=substr($P,$this->headsize);$this->headsize=0;}if(!$this->htmldoc&&$this->markdown){$this->htmldoc=\Parsedown::instance()->text($this->markdown);}$UD=['metatext'=>$this->metatext,'markdown'=>$this->markdown,'htmldoc'=>$this->htmldoc,];return array_merge($this->metadata,$UD);}function update($bD,$aD){$P=$bD."\n\n".$aD;file_put_contents($this->filepath,$P,LOCK_EX);$this->parseMetaData(true);return$this;}}use TQ\Git\Repository\Repository as GitRepository;use TQ\Git\Cli\Binary as GitBinary;$KB=\Docx\Importer::getInstance();$KB->import('TQ',VENDOR_DIR.'/PHP-Stream-Wrapper-for-Git-1.0.1/src');class Repository extends GitRepository{static function open($eB,$_=null,$XD=false,$iB=null,$WD=true){if(empty($_)){$_=GitBinary::locateBinary()?:'git';}return parent::open($eB,$_,$XD,$iB,$WD);}static function buildRemotePath($GB,$QC='',$dD=''){if(Common::startsWith($GB,'http')&&!empty($QC)){$XC=$QC.':'.$dD.'@';$GB=str_replace('https://','https://'.$XC,$GB);$GB=str_replace('http://','http://'.$XC,$GB);}return$GB;}static function create($eB,$xD,$_=null,$iB=null){$YC=self::open($eB,$_,true,$iB,false);$YC->remote('add','origin',$xD);return$YC;}function commitMutely($CE,array$u=null,$BE=null,array$AE=[]){try{$this->commit($CE,$u,$BE,$AE);return true;}catch(\Exception$EC){return false;}}function __call($A,$B){$_=$this->getGit();$F=$this->getRepositoryPath();return$_->$A($F,$B);}}class Word{static$digits='0123456789';static$chars='〇一二三四五六七八九十百千万亿';static$caps='零壹贰叁肆伍陆柒捌玖拾佰仟萬億';protected$content='';function __construct($P=''){$this->content=$P;}static function slugify($A){return strtolower(str_replace([' ','_'],'-',$A));}static function num2char($_D,$KC=false){$yD=$KC?self::$caps:self::$chars;return self::mbStrtr(strval($_D),self::$digits,$yD);}static function mbStrtr($DB,$GC,$FC){$GC=self::mbStrSplit($GC);$FC=self::mbStrSplit($FC);return str_replace($GC,$FC,$DB);}static function mbStrSplit($DB){$vD=self::hasNonASCII($DB)?3:1;return str_split($DB,$vD);}static function hasNonASCII($DB){return preg_match('/[^\x20-\x7f]/',$DB);}static function spell($XB,$KC=false){$tD=new\NumberFormatter('zh_CN',\NumberFormatter::SPELLOUT);$BC=$tD->format($XB);if($KC){$BC=self::mbStrtr($BC,self::$chars,self::$caps);}return$BC;}function b64decode($s){if(preg_match('!([A-Za-z0-9+/= ]+)!',$s,$LB)){$s=$LB[1];}return base64_decode($s);}static function randHash($l=6){$l=$l>32?32:$l;$qD=md5(mt_rand().time());$pD=substr($qD,0,$l);return$pD;}static function randString($l=6,$SD=2,$PB=''){if(empty($PB)){$PB='abcdefghijkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789';}srand((float)microtime()*1000000);$VC='';$ZB=ceil($l/$SD);while($l>0){$PB=str_shuffle($PB);$VC.=substr($PB,0,$ZB);$l-=$ZB;$ZB=min($l,$ZB);}return$VC;}function fetchFirstURL(){if(preg_match('/^http[^\x23-\x76]/i',$this->content,$LB)){return$LB[1];}}function ver2int(){$yC=$this->getNumbers(false);$wB=array_map('intval',explode('.',$yC));$wB=array_pad($wB,3,0);return intval(vsprintf('%d%02d%02d',$wB));}function getNumbers($wC=true){$UC=preg_match_all('/[\d.]+/',$this->content,$LB);if($UC===0||$UC===false){return false;}$XB=implode(current($LB));return$wC?intval($XB):$XB;}}}
namespace Docx\Web{use Docx\Common;use Docx\Application;class Handler{protected$app=null;protected$backend=null;protected$template='';protected$context=[];var$method='get';var$args=[];var$globals=[];function __construct(Application&$zC,&$RB=null,$L='get'){$this->app=$zC;$this->backend=$RB;$this->method=$L;}function __toString(){$uB=$this->app->response;$uB->addFrameFile($this->template);$uB->addGlobals($this->globals);return$uB->render($this->context);}function __invoke(){$this->args=func_get_args();$this->prepare();$tC=$this->method.'Action';Common::execMethodArray($this,$tC,$this->args);$this->finish();return$this;}function prepare(){}function finish(){}function except($fC){return Response::abort(500);}}use Docx\Base\EnumType;class MimeType extends EnumType{const __prefix='EXT_';const __default=self::EXT_HTML;const EXT_HTML='text/html';const EXT_HTM='text/html';const EXT_SHTML='text/html';const EXT_CSS='text/css';const EXT_XML='text/xml';const EXT_GIF='image/gif';const EXT_JPEG='image/jpeg';const EXT_JPG='image/jpeg';const EXT_JS='application/javascript';const EXT_ATOM='application/atom+xml';const EXT_RSS='application/rss+xml';const EXT_MML='text/mathml';const EXT_TXT='text/plain';const EXT_JAD='text/vnd.sun.j2me.app-descriptor';const EXT_WML='text/vnd.wap.wml';const EXT_HTC='text/x-component';const EXT_PNG='image/png';const EXT_TIF='image/tiff';const EXT_TIFF='image/tiff';const EXT_WBMP='image/vnd.wap.wbmp';const EXT_ICO='image/x-icon';const EXT_JNG='image/x-jng';const EXT_BMP='image/x-ms-bmp';const EXT_SVG='image/svg+xml';const EXT_SVGZ='image/svg+xml';const EXT_WEBP='image/webp';const EXT_WOFF='application/font-woff';const EXT_JAR='application/java-archive';const EXT_WAR='application/java-archive';const EXT_EAR='application/java-archive';const EXT_JSON='application/json';const EXT_HQX='application/mac-binhex40';const EXT_DOC='application/msword';const EXT_PDF='application/pdf';const EXT_PS='application/postscript';const EXT_EPS='application/postscript';const EXT_AI='application/postscript';const EXT_RTF='application/rtf';const EXT_M3U8='application/vnd.apple.mpegurl';const EXT_XLS='application/vnd.ms-excel';const EXT_EOT='application/vnd.ms-fontobject';const EXT_PPT='application/vnd.ms-powerpoint';const EXT_WMLC='application/vnd.wap.wmlc';const EXT_KML='application/vnd.google-earth.kml+xml';const EXT_KMZ='application/vnd.google-earth.kmz';const EXT_7Z='application/x-7z-compressed';const EXT_CCO='application/x-cocoa';const EXT_JARDIFF='application/x-java-archive-diff';const EXT_JNLP='application/x-java-jnlp-file';const EXT_RUN='application/x-makeself';const EXT_PL='application/x-perl';const EXT_PM='application/x-perl';const EXT_PRC='application/x-pilot';const EXT_PDB='application/x-pilot';const EXT_RAR='application/x-rar-compressed';const EXT_RPM='application/x-redhat-package-manager';const EXT_SEA='application/x-sea';const EXT_SWF='application/x-shockwave-flash';const EXT_SIT='application/x-stuffit';const EXT_TCL='application/x-tcl';const EXT_TK='application/x-tcl';const EXT_DER='application/x-x509-ca-cert';const EXT_PEM='application/x-x509-ca-cert';const EXT_CRT='application/x-x509-ca-cert';const EXT_XPI='application/x-xpinstall';const EXT_XHTML='application/xhtml+xml';const EXT_XSPF='application/xspf+xml';const EXT_ZIP='application/zip';const EXT_BIN='application/octet-stream';const EXT_EXE='application/octet-stream';const EXT_DLL='application/octet-stream';const EXT_DEB='application/octet-stream';const EXT_DMG='application/octet-stream';const EXT_ISO='application/octet-stream';const EXT_IMG='application/octet-stream';const EXT_MSI='application/octet-stream';const EXT_MSP='application/octet-stream';const EXT_MSM='application/octet-stream';const EXT_DOCX='application/vnd.openxmlformats-officedocument.wordprocessingml.document';const EXT_XLSX='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';const EXT_PPTX='application/vnd.openxmlformats-officedocument.presentationml.presentation';const EXT_MID='audio/midi';const EXT_MIDI='audio/midi';const EXT_KAR='audio/midi';const EXT_MP3='audio/mpeg';const EXT_OGG='audio/ogg';const EXT_M4A='audio/x-m4a';const EXT_RA='audio/x-realaudio';const EXT_3GPP='video/3gpp';const EXT_3GP='video/3gpp';const EXT_TS='video/mp2t';const EXT_MP4='video/mp4';const EXT_MPEG='video/mpeg';const EXT_MPG='video/mpeg';const EXT_MOV='video/quicktime';const EXT_WEBM='video/webm';const EXT_FLV='video/x-flv';const EXT_M4V='video/x-m4v';const EXT_MNG='video/x-mng';const EXT_ASX='video/x-ms-asf';const EXT_ASF='video/x-ms-asf';const EXT_WMV='video/x-ms-wmv';const EXT_AVI='video/x-msvideo';function getConstants(){return['EXT_HTML','EXT_HTM','EXT_SHTML','EXT_CSS','EXT_XML','EXT_GIF','EXT_JPEG','EXT_JPG','EXT_JS','EXT_ATOM','EXT_RSS','EXT_MML','EXT_TXT','EXT_JAD','EXT_WML','EXT_HTC','EXT_PNG','EXT_TIF','EXT_TIFF','EXT_WBMP','EXT_ICO','EXT_JNG','EXT_BMP','EXT_SVG','EXT_SVGZ','EXT_WEBP','EXT_WOFF','EXT_JAR','EXT_WAR','EXT_EAR','EXT_JSON','EXT_HQX','EXT_DOC','EXT_PDF','EXT_PS','EXT_EPS','EXT_AI','EXT_RTF','EXT_M3U8','EXT_XLS','EXT_EOT','EXT_PPT','EXT_WMLC','EXT_KML','EXT_KMZ','EXT_7Z','EXT_CCO','EXT_JARDIFF','EXT_JNLP','EXT_RUN','EXT_PL','EXT_PM','EXT_PRC','EXT_PDB','EXT_RAR','EXT_RPM','EXT_SEA','EXT_SWF','EXT_SIT','EXT_TCL','EXT_TK','EXT_DER','EXT_PEM','EXT_CRT','EXT_XPI','EXT_XHTML','EXT_XSPF','EXT_ZIP','EXT_BIN','EXT_EXE','EXT_DLL','EXT_DEB','EXT_DMG','EXT_ISO','EXT_IMG','EXT_MSI','EXT_MSP','EXT_MSM','EXT_DOCX','EXT_XLSX','EXT_PPTX','EXT_MID','EXT_MIDI','EXT_KAR','EXT_MP3','EXT_OGG','EXT_M4A','EXT_RA','EXT_3GPP','EXT_3GP','EXT_TS','EXT_MP4','EXT_MPEG','EXT_MPG','EXT_MOV','EXT_WEBM','EXT_FLV','EXT_M4V','EXT_MNG','EXT_ASX','EXT_ASF','EXT_WMV','EXT_AVI',];}}@session_start();class Request{function __call($A,$sC){if(!Common::startsWith($A,'get')){return;}$A=strtolower(substr($A,3));@list($E,$Q,$sB)=$sC;switch($A){case'server':case'session':$D=self::getValue($A,$E,$Q);break;case'cookie':case'env':case'post':$D=self::getInput($A,$E,$Q);break;default:$J=self::detectInput($sB);if($J===INPUT_REQUEST||$J===INPUT_SESSION){$D=self::getValue($sB,$E,$Q,$A);}else{$D=self::getInput($sB,$E,$Q,$A);}break;}return$D;}protected static function detectInput($J='REQUEST'){$J=strtoupper($J?:'REQUEST');return constant('INPUT_'.$J);}protected static function detectType($U='string'){if(!is_array($U)){if($U==='raw'){return filter_id('unsafe_raw');}else{return filter_id($U?:'string');}}foreach($U as$E=>$O){if(is_array($O)){$U[$E]['filter']=self::detectType($O['filter']);}else{$U[$E]=self::detectType($O);}}return$U;}static function setValue($E,$I,$J='REQUEST'){$J=self::detectInput($J);switch($J){case INPUT_REQUEST:$_REQUEST[$E]=$I;break;case INPUT_COOKIE:$_COOKIE[$E]=$I;break;case INPUT_SESSION:$_SESSION[$E]=$I;break;case INPUT_ENV:$_ENV[$E]=$I;break;}}static function getValue($J,$E,$Q=null,$O='string'){$J=self::detectInput($J);if(is_null($J)){return;}if($J===INPUT_REQUEST){$J=$_REQUEST;}elseif($J===INPUT_SESSION){$J=$_SESSION;}elseif($J===INPUT_SERVER){$J=$_SERVER;}$O=self::detectType($O);if(is_array($O)||is_array($Q)){$pB=[$E=>['filter'=>$O,'flags'=>FILTER_FORCE_ARRAY]];$FB=filter_var_array($J,$pB,true);return isset($FB[$E])?$FB[$E]:$Q;}else{$I=isset($J[$E])?$J[$E]:$Q;return filter_var($I,$O);}}static function getInput($J,$E,$Q=null,$O='string'){$J=self::detectInput($J);if(is_null($J)){return;}$O=self::detectType($O);if(is_array($O)||is_array($Q)){$pB=[$E=>['filter'=>$O,'flags'=>FILTER_FORCE_ARRAY]];$I=filter_input_array($J,$pB,true);}else{$I=filter_input($J,$E,$O);}return is_null($I)?$Q:$I;}static function pop($E,$Q=null,$O='string'){$I=self::getValue('REQUEST',$E,$Q,$O);if(isset($_REQUEST[$E])){unset($_REQUEST[$E]);}return$I;}static function all($U='string',$J='REQUEST'){$J=self::detectInput($J);if(is_null($J)){return;}$U=self::detectType($U);if($J===INPUT_REQUEST){return filter_var_array($_REQUEST,$U);}elseif($J===INPUT_SESSION){return filter_var_array($_SESSION,$U);}elseif($J===INPUT_SERVER){return filter_var_array($_SERVER,$U);}else{return filter_input_array($J,$U,true);}}static function getURIPath(){$tB=self::getInput('SERVER','REQUEST_URI');return parse_url($tB,PHP_URL_PATH);}static function getMethod(){$L=self::getInput('SERVER','REQUEST_METHOD','GET');return strtolower($L);}static function getClientIP(){$qB=['HTTP_CLIENT_IP','HTTP_X_REAL_IP','HTTP_X_FORWARDED_FOR','HTTP_X_FORWARDED','HTTP_X_CLUSTER_CLIENT_IP','HTTP_FORWARDED_FOR','HTTP_FORWARDED','REMOTE_ADDR',];foreach($qB as$E){$_B=self::getValue('SERVER',$E,'');if($_B&&strlen($_B)>=7){break;}}return$_B;}static function getArgv(){if(Common::isCLI()){return self::getValue('SERVER','argv',[],'string');}}}class Response{protected$frame_files=[];protected$stack=[];var$blocks=[];var$globals=[];var$mime_type=null;var$charset='';function __construct($AD='',array$rB=[]){$this->addFrameFile($AD);$this->addGlobals($rB);}static function abort($DC=500){return http_response_code($DC);}static function header($A,$I,$PD=true,$DC=200){if(!headers_sent()){$K=empty($A)?'':strval($A).': ';$K.=is_array($I)?implode(' ',$I):strval($I);header($K,$PD,$DC);}}static function redirect($_C='',$OD=false){$ND=$OD?301:302;self::header('Location',$_C,true,$ND);return die();}function addGlobals(array$rB){$this->globals=array_merge($this->globals,$rB);return$this;}function addFrameFile($q){if($q&&is_readable($q)){$this->frame_files[]=$q;}return$this;}function extendTpl($IC){if($IC&&is_readable($IC)){array_unshift($this->frame_files,$IC);}return$this;}function includeTpl($q){if($q&&is_readable($q)){extract($this->globals);include$q;}}function blockStart($A='content'){array_push($this->stack,$A);ob_start();}function blockEnd(){$KD=trim(ob_get_clean());if($A=array_pop($this->stack)){$this->blocks[$A]=$KD;}}function block($A='content'){if(isset($this->blocks[$A])){return$this->blocks[$A];}}function setContentType($O,$ID='utf-8'){$this->mime_type=new MimeType($O);$this->charset=strval($ID);$K=$this->mime_type.'; charset='.$this->charset;self::header('Content-Type',$K);return$this;}function render(array$M=[]){extract($this->globals);extract($M);ob_start();while($q=array_pop($this->frame_files)){include$q;}return trim(ob_get_clean());}}class Router{static$aliases=['<int>'=>'([0-9\-]+)','<float>'=>'([0-9\.\-]+)','<num>'=>'([0-9\.\-,]*)','<string>'=>'([a-z0-9\-_]+)','<page>'=>'([0-9]*)/?([0-9]*)/?','<path>'=>'([a-z0-9\-_/]*)','<word>'=>'([^/]*)',];var$rule='';var$path='';var$url='';var$args=[];var$handlers=[];protected static$current=null;protected$filename='';protected$prefix='';protected$children=[];protected$items=[];protected function __construct($G='',$X='/'){$BD=['//','/','\\'];$this->filename=str_replace($BD,DIRECTORY_SEPARATOR,$G);$this->prefix=rtrim($X,'/');self::$current=$this;if($this->filename&&is_readable($this->filename)){include_once$this->filename;}}static function getCurrent(){return self::$current?:new self();}static function toPrefix($G){$z=strstr(basename($G),'.');$HD=substr($G,0,-strlen($z));$X=str_replace(DIRECTORY_SEPARATOR,'/',$HD);return strtolower(rtrim($X,'/'));}static function compileUrl($w,$GD=false){$w=preg_quote(strtolower(rtrim($w,'/')));$qB=array_map('preg_quote',array_keys(self::$aliases));$FB=array_values(self::$aliases);$w=str_replace($qB,$FB,$w);$JC=($GD===false)?'':'(.*)?';return'!^'.$w.'/?'.$JC.'$!';}function route($F,$b){$JB=self::compileUrl($F);if(func_num_args()>2){$UB=array_slice(func_get_args(),1);}else{$UB=[$b];}$this->items[$JB]=$UB;return$JB;}function expose($m,$JC='*.php'){$m=rtrim($m,DIRECTORY_SEPARATOR);$bB=glob($m.'/'.$JC,GLOB_BRACE);if(!empty($bB)){$FD=strlen($m);foreach($bB as$G){$X=self::toPrefix(substr($G,$FD));$this->children[$X]=$G;}}return$this;}function dispatch($F,$RC=false){$F=rtrim(strtolower($F),'/').'/';if(!$RC){krsort($this->children);}foreach($this->children as$X=>$G){if(Common::startsWith($F,$X)){$kB=new self($G,$X);$F=substr($F,strlen($X));return$kB->dispatch($F);}}if(!$RC){krsort($this->items);}foreach($this->items as$JB=>$UB){if(preg_match($JB,$F,$B)===1){$tB=$this->prefix.array_shift($B);return['handlers'=>$UB,'args'=>$B,'rule'=>$JB,'path'=>$F,'uri'=>$tB,];}}return;}}class URL{const PHP_INDEX_FILE='index.php';protected$route_key=null;protected$path=false;var$rule='';var$args=[];function __construct($HC=null){$this->route_key=$HC;}function getRouteKey(){return$this->route_key;}function parseURI(){$F=Request::getURIPath();$A=Request::getInput('SERVER','SCRIPT_NAME');if(empty($F)||$F===$A){return'';}$jB=substr($A,0,-strlen(self::PHP_INDEX_FILE));if($F===$jB){$F='';}else if(Common::startsWith($F,$A)){$F=substr($F,strlen($A));}else if(Common::startsWith($F,$jB)){$F=substr($F,strlen($jB)-1);}return trim($F);}function getPath(){if($this->path===false){if($this->route_key){$this->path=Request::pop($this->route_key,'/');}else{$this->path=$this->parseURI();}}return$this->path;}function getDepth(){if($this->route_key){return-1;}else{$OC=substr_count($this->getPath(),'/');return$OC>0?$OC-1:0;}}function getPrefix(){if($this->route_key){return sprintf('?%s=/',$this->route_key);}else if($CD=$this->getDepth()){return str_repeat('../',$CD);}else{return self::PHP_INDEX_FILE.'/';}}function getHome(){if($this->route_key){$ZC=sprintf('?%s=/',$this->route_key);}else{$ZC=str_repeat('../',$this->getDepth()+3);}return$ZC;}}}